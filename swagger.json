{
  "openapi": "3.0.0",
  "info": {
    "title": "BoroHubMedia API Documentation",
    "description": "The BoroHubMedia API provides comprehensive guidance and resources for developers to integrate and interact with the BoroHubMedia platform. This documentation includes essential information for the effective use of the API.\n\nThis API supports a wide range of features, including member management, chat functionality, feedback comments, and content posting. It is designed to be easy to use and integrate, with clear documentation and examples to help developers get started quickly.\n\n### Key Features\n\n- **Authentication**: Details on how to verify requests, including member registration and login procedures.\n    \n- **Endpoints**: A list of available API endpoints, including parameters, request methods, and example responses.\n    \n- **Error Handling**: Information about common error codes and how to handle them effectively.\n    \n- **Usage Examples**: Practical examples demonstrating how to use the API for various tasks.\n    \n\n### Core Functionalities\n\n- **Members**: Manage user accounts, including registration, profile updates, and authentication processes.\n    \n- **Chats**: Facilitate real-time messaging between members, allowing for direct communication and interaction.\n    \n- **Feedback Comments**: Enable members to provide feedback on content or features, fostering community engagement and improvement.\n    \n- **Content Posts**: Allow members to create, edit, and delete posts, sharing media and information with the community.\n    \n\n### Input Validation with Joi\n\nThe BoroHubMedia API utilizes **Joi** for validating incoming request data. Joi allows developers to define schemas for request payloads, ensuring that all required fields are present and correctly formatted.\n\nThis validation process helps maintain data integrity and provides clear error messages for any invalid input, making it easier for developers to identify and resolve issues , for example invalid during account initialization.\n\n### API Limiting\n\nTo enhance security and performance, the BoroHubMedia API implements an **API limiter** across all routes. This feature includes:\n\n- **Access Limiter**: Limits login attempts to prevent brute force attacks, allowing a maximum of 5 login attempts within a 5-minute window.\n    \n- **General API Limiter**: Limits the number of requests to general API endpoints, allowing a maximum of 100 requests per 15 minutes from each IP address.\n    \n\n### Benefits of API Limiting\n\n- **Enhanced Security**: Protects against brute force attacks and other malicious activities.\n    \n- **Improved Performance**: Reduces server load and ensures that resources are available for legitimate members.\n    \n- **Fair Usage**: Ensures that all members have equitable access to the API.\n    \n\n### Logging with Morgan\n\nThe BoroHubMedia API uses **Morgan**, an HTTP request logger middleware that is directly integrated into the Express framework. This middleware is crucial for monitoring and debugging API interactions.\n\n#### Benefits of Using Morgan\n\n- **Request Logging**: Logs incoming requests, including HTTP method, URL, response time, and status codes.\n    \n- **Error Tracking**: Captures errors by logging the details of requests that lead to failures, facilitating easier troubleshooting.\n    \n- **Performance Monitoring**: Helps monitor the performance of the API by providing metrics on request-response times.\n    \n\n### Usage of Helmet to Protect Headers\n\nThe API also uses **Helmet** to improve security by setting important HTTP headers. Helmet helps protect the application from common threats like cross-site scripting (XSS) and clickjacking, making it safer overall.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://{{borohubmedia}}auth"
    },
    {
      "url": "http://{{borohubmedia}}member"
    },
    {
      "url": "http://localhost:3000"
    },
    {
      "url": "http://{{borohubmedia}}content"
    },
    {
      "url": "http://{{borohubmedia}}comment"
    },
    {
      "url": "http://{{borohubmedia}}chat"
    }
  ],
  "components": {
    "securitySchemes": {
      "apikeyAuth": {
        "type": "http",
        "scheme": "apikey"
      }
    }
  },
  "security": [
    {
      "apikeyAuth": []
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "The **Authentication** folder contains all the requests and documentation related to member authentication processes within the application encapsulated in the **MemberAuthenticationController** Class. This includes methods with functionalities for member registration, login, and session management. Key components include:\n\n- **InitializeAccount**: Allows new members to create an account.\n    \n- **AccessAccount**: Enables existing members to access their accounts.\n    \n- **EndSession**: Terminates/logout the member session.\n    \n- **GetMemberSession**: Retrieves the current member session.\n    \n\nEach request is structured with clear endpoints, HTTP methods, headers, and expected request/response formats to facilitate seamless integration and testing."
    },
    {
      "name": "Authentication > InitializeAccount Endpoint",
      "description": "This folder provides details about the `initializeAccount` method in the `MemberController` class, which is responsible for creating a new member account. with either \"admin\" priviledges or just a regular member"
    },
    {
      "name": "Authentication > AccessAccount Endpoint",
      "description": "This endpoint allows members to access their accounts by providing either their email address or handle along with their password. The process includes the following steps:\n\n1. **Input Validation**: The endpoint validates the provided input to ensure it meets the required format.\n    \n2. **Member Verification**: It checks for the existence of the member in the system.\n    \n3. **Password Comparison**: The provided password is compared with the stored hashed password for authentication.\n    \n4. **Token Generation**: If the authentication is successful, access and refresh tokens are generated and returned to the member.\n    \n\nAdditionally, the endpoint implements rate limiting to protect against brute force attacks by restricting the number of login attempts within a specified time frame."
    },
    {
      "name": "Authentication > GetMemberSession Endpoint",
      "description": "This documentation provides details about the getUser Session method in the MemberController class, which is responsible for retrieving the current member's session information based on the access token stored in cookies."
    },
    {
      "name": "Authentication > EndMemberSession Endpoint",
      "description": "This folder provides details about the `endSession` method in the `MemberController` class, which is responsible for ending a member's session by clearing the authentication cookies."
    },
    {
      "name": "Member Management",
      "description": "This documentation provides an overview of the endpoints available in the **MemberController** class. The **MemberController** is responsible for managing member account functionalities, including:\n\n- **Token Management**: Refreshing authentication tokens for members.\n    \n- **Member Information**: Retrieving detailed information about members.\n    \n- **Profile Updates**: Updating member details such as name, email, and preferences.\n    \n- **Follow/Unfollow/Restrict/Unrestrict**: Managing relationships between members by allowing members to follow, unfollow, restrict, unsrestrict each other.\n    \n- **Image Management**: Handling member images, including uploading and deleting profile pictures.\n    \n\nEach request is structured with clear endpoints, HTTP methods, headers, and expected request/response formats to facilitate seamless integration and testing."
    },
    {
      "name": "Member Management > getMember Endpoint",
      "description": "This endpoint retrieves the details of a specific member based on their unique identifier (ID). It returns the member's information, including their name, email, handle, and any other relevant details. If the member is not found, a 404 error is returned."
    },
    {
      "name": "Member Management > Update Member Endpoint",
      "description": "This endpoint updates the details of a specific member identified by their unique identifier (ID). The request requires the updated member information in the request body. If the update is successful, the updated member details are returned. If the member with the specified ID is not found, a 404 error is returned."
    },
    {
      "name": "Member Management > Follow Member Endpoint",
      "description": "This following feature permits the member follow each other members. Such a following would allow a member to receive notifications regarding posts, comments, and anything else that may be happening around the subscribed member, thereby creating a perfect social environment"
    },
    {
      "name": "Member Management > Unfollow Member Endpoint",
      "description": "This endpoint allows members to remove a following relationship by providing the member ID of the person they wish to unfollow. It validates the user's authentication and ensures that the member is not trying to unfollow themselves or is not currently following the member."
    },
    {
      "name": "Member Management > RestrictedMember Endpoint",
      "description": "This endpoint allows members to restrict another member by providing the member ID of the person they wish to restrict. It validates the member's authentication and ensures that they are not trying to restrict themselves or that the member is not already restricted."
    },
    {
      "name": "Member Management > UnrestrictedMember Endpoint",
      "description": "This endpoint allows members to remove a restriction on another member by providing the restricted user ID. It validates the member's authentication and ensures that they are not trying to unrestrict themselves or that the member is currently restricted."
    },
    {
      "name": "Member Management > GetRestrictedList Endpoint",
      "description": "This endpoint allows members to retrieve a list of users they have restricted. It validates the member's authentication and fetches the restricted users associated with the authenticated member."
    },
    {
      "name": "Member Management > Get Followers List",
      "description": "This endpoint allows members to retrieve a list of followers for a specified member. It validates the existence of the member and fetches the followers associated with that member."
    },
    {
      "name": "Member Management > Upload Member's Profile Picture",
      "description": "This folder contains an endpoint that allows members to upload a new profile picture for their account. It accepts an image file and updates the member's profile with the new picture. This feature enhances members  personalization and engagement within the application."
    },
    {
      "name": "Member Management > Upload Member's Cover Photo",
      "description": "This endpoint allows members to upload a new cover photo for their account. It updates the member's cover image URL in the database and returns the updated member data. The member ID is derived from the authenticated token, ensuring that only the logged-in member can update their own cover photo without needing to specify their ID explicitly in the URL. The request must be made as multipart/form-data, containing the image file to be uploaded."
    },
    {
      "name": "Member Management > Refresh accessToken Endpoint",
      "description": "This endpoint allows members to refresh their access tokens by providing a valid refresh token stored in cookies. It verifies the refresh token's validity and generates a new access token if the refresh token is valid."
    },
    {
      "name": "Member Management > Delete Member endpoint",
      "description": "This endpoint allows an admin to delete a member and all associated data from the system. It validates the existence of the member and removes related content, comments, and connections."
    },
    {
      "name": "Content Post Management",
      "description": "The **ContentPostController** class is responsible for managing content posts within the API. It offers a comprehensive set of methods that enable members to perform various actions on posts, including:\n\n- **Create Posts**: Allowing members to create new content posts.\n    \n- **Update Posts**: Enabling members to modify existing posts.\n    \n- **Like Posts**: Allowing members to express appreciation for posts by liking them.\n    \n- **Unlike Posts**: Enabling members to remove their likes from posts.\n    \n- **Delete Posts**: Allowing members to permanently remove their posts.\n    \n- **Manage Comments**: Handling comments associated with posts, including adding, updating, and deleting comments.\n    \n\nEach method includes error handling and validation to ensure a robust and user-friendly experience."
    },
    {
      "name": "Content Post Management > Create Post With Images Endpoint",
      "description": "This endpoint allows members to create a new content post that includes multiple images. It validates the existence of the member, checks the content, and ensures that the required number of media files are uploaded."
    },
    {
      "name": "Content Post Management > Update Content",
      "description": "This endpoint allows members to update an existing content post. It validates the existence of the post, checks if the member is the author, and allows for content and media updates."
    },
    {
      "name": "Content Post Management > Like A Content Post",
      "description": "This endpoint allows members to like a content post. It validates the existence of the member and the post, checks for duplicate likes, and updates the like count accordingly"
    },
    {
      "name": "Content Post Management > Unlike Content Post Endpoint",
      "description": "This endpoint allows members to remove their like from a content post. It validates the existence of the member and the post, checks if the member has previously liked the post, and updates the like count, if you check the likcount you will see that it has decrease by 1"
    },
    {
      "name": "Content Post Management > Delete Content Post",
      "description": "### Delete Content Post Folder Description\n\nThis folder contains the functionality for managing content posts within the application, specifically focusing on the deletion of posts by their authors. It includes the `deleteContentPostController`, which handles the logic for deleting a post, including validation of post existence, authorization checks to ensure the member is the author, and the removal of associated comments and likes."
    },
    {
      "name": "Content Post Management > Retrieve Post",
      "description": "This endpoint Contains a request for retrieving a post by its ID"
    },
    {
      "name": "Content Post Management > Get All Member Post",
      "description": "Retrieves All post made by a specific Member including his/her details"
    },
    {
      "name": "Comments Management",
      "description": "The **FeedbackCommentController** class is responsible for managing comments on content posts within the API. It offers a comprehensive set of methods that enable members to perform various actions on comments, including:\n\n- **Create Comment**: Allowing members to add new comments to posts.\n    \n- **Update Comment**: Enabling members to modify their existing comments.\n    \n- **Create Comment Reply**: Allowing members to reply to comments made by others.\n    \n- **Like Comment**: Enabling members to express appreciation for comments by liking them.\n    \n- **Dislike Comment**: Allowing members to remove their likes from comments.\n    \n- **Delete Comment**: Permitting members to permanently remove their comments.\n    \n\nEach method includes error handling and validation and described clearly below"
    },
    {
      "name": "Comments Management > Create Comment Endpoint",
      "description": "This folder contains the implementation for creating comments on content posts in the application. The main functionality is encapsulated in the `createComment` method, which handles the creation of a new comment associated with a specific content post and member."
    },
    {
      "name": "Comments Management > Update Comment Endpoint",
      "description": "This folder contains the implementation for updating comments on content posts in the application. The main functionality is encapsulated in the `updateComment` method, which handles the updating of an existing comment."
    },
    {
      "name": "Comments Management > Like Comment Endpoint",
      "description": "This folder contains the implementation for creating replies to comments on content posts in the application. The main functionality is encapsulated in the `createCommentReply` method, which handles the creation of a new reply associated with a specific comment and member."
    },
    {
      "name": "Comments Management > Dislike Comment Endpoint",
      "description": "This endpoint allows members to remove their like from a specific comment. It validates the existence of the comment, checks if the member has previously liked it, and updates the like count, when you check the database you will see that the count for comment likes have reduced by 1"
    },
    {
      "name": "Comments Management > Reply Comment Endpoint",
      "description": "This folder contains the implementation for liking comments on content posts in the application. The main functionality is encapsulated in the `likeCommentController` method, which handles the addition of a like to a specific comment"
    },
    {
      "name": "Comments Management > like Comment Reply",
      "description": "This folder contains the implementation for liking comments reply on content posts in the application. The main functionality is encapsulated in the dis`likeCommentController` method, which handles the removal of a like from a specific comment."
    },
    {
      "name": "Comments Management > Dislike Comment Reply",
      "description": "This folder contains the implementation for disliking replies to comments on content posts in the application. The main functionality is encapsulated in the `dislikeCommentReply` method, which handles the removal of a like from a specific reply"
    },
    {
      "name": "Comments Management > Delete Comment",
      "description": "This folder contains the implementation for deleting comments on content posts in the application. The main functionality is encapsulated in the `deleteCommentController` method, which handles the removal of a specific comment and its associated data.\n\nThis endpoint allows members to delete a specific comment. It validates the existence of the comment, checks if the member is the author of the comment, and removes the comment along with its associated likes and replies."
    },
    {
      "name": "Chat Management",
      "description": "The **ChatController** class is responsible for managing chat-related functionalities within the API. It offers a comprehensive set of methods that enable members to perform various actions related to chats, including:\n\n- **Create Chats**: Allowing members to initiate new chat conversations.\n    \n- **Chat Entry(Send Messages)**: Enabling members to send messages within existing chats.\n    \n- **Retrieve Chats**: Allowing members to access their chat history and view ongoing conversations.\n    \n- **Delete Chats**: Permitting members to remove chat conversations they no longer wish to keep.\n    \n\nEach method includes error handling and validation to ensure a robust and user-friendly experience."
    },
    {
      "name": "Chat Management > Chat Creation Endpoint",
      "description": "This folder contains the implementation for creating chat sessions in the application. The main functionality is encapsulated in the `createChat` method, which handles the creation of a new chat with specified participants while the creator is added automatically"
    },
    {
      "name": "Chat Management > Chat Entry Creation Endpoint",
      "description": "This folder contains the implementation for creating chat entries (messages) in the application. The main functionality is encapsulated in the `createChatEntry` method, which handles the addition of a new message to a specific chat."
    },
    {
      "name": "Chat Management > Chat Retrieval Endpoint",
      "description": "This folder contains the implementation for retrieving chat sessions in the application. The main functionality is encapsulated in the `getChat` method, which handles fetching a specific chat by its ID."
    },
    {
      "name": "Chat Management > Chat Deletion Endpoint",
      "description": "This endpoint allows members to delete a specific chat with respect to their IDs. Only members with admin role and creators are allowed to delete a chat"
    }
  ],
  "paths": {
    "/initializeAccount": {
      "post": {
        "tags": ["Authentication > InitializeAccount Endpoint"],
        "summary": "New Request",
        "description": "This endpoint allows users to create a new member account by providing the necessary details. It validates the input, checks for existing users, hashes the password, and saves the new member to the database.\n\n## Request Parameters\n\n### Body Parameters:\n\n- **`plainPassword`** (String, required): The password that the member wants to set for their account.\n    \n- **`emailAddress`** (String, required): The email address of the user. Must be unique.\n    \n- **`handle`** (String, required): The username or handle of the member. Must be unique.\n    \n- **`fullName`** (String, required): The full name of the member.\n    \n- **`aboutMe`** (String, optional): A brief description about the member.\n    \n- **`role`** (String, optional): The role of the user (e.g., \"member\", \"admin\").\n    \n\n| Status Code | Description |\n| --- | --- |\n| `201` | Member account created successfully |\n| `400` | Bad request due to missing fields or duplicate email/handle |\n| `500` | An internal server error occurred |",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "fullName": "Boro Didier",
                  "handle": "borodidie",
                  "emailAddress": "borodidier@gmail.com",
                  "plainPassword": "borodidier123",
                  "aboutMe": "This ia an admin account for the members",
                  "role": "admin"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "478"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"1de-pbjK4XGJi3pH9UpHz/gt8Mjusbs\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Fri, 17 Jan 2025 16:21:25 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Member account created successfully!",
                    "savedUser": {
                      "fullName": "Boro Didier",
                      "handle": "borodidier",
                      "emailAddress": "borodidiern@gmail.com",
                      "role": "admin",
                      "aboutMe": "This ia an admin account for the members",
                      "avatar": "",
                      "coverImage": "",
                      "chats": [],
                      "connections": {
                        "followers": [],
                        "following": []
                      },
                      "posts": [],
                      "restrictedUsers": [],
                      "_id": "678a83855a365753377ce8a0",
                      "createdAt": "2025-01-17T16:21:25.456Z",
                      "updatedAt": "2025-01-17T16:21:25.456Z",
                      "__v": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accessAccount": {
      "post": {
        "tags": ["Authentication > AccessAccount Endpoint"],
        "summary": "New Request",
        "description": "This request allows members to log in to their member account by sending a POST request to the authentication endpoint. The request typically includes the following components:\n\n### Request Parameters\n\n#### Body Parameters:\n\n- **plainPassword** (String, required): The password that the user uses to log in to their account.\n    \n- **emailAddress** (String, optional): The email address of the member. Must be unique.\n    \n- **handle** (String, optional): The username or handle of the member. Must be unique.\n    \n\n### Access Limiter\n\nTo enhance security and protect against brute force attacks, an access limiter is implemented using rate limiting:\n\n- **Rate Limiting**: Users are allowed a maximum of **5 login attempts within a 5-minute window**. Exceeding this limit will result in a **429 Too Many Requests** response. This mechanism helps prevent brute force attacks by limiting the number of attempts an attacker can make in a short period.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| **201** | Member account accessed successfully. |\n| **400** | Bad request due to missing fields or invalid input. |\n| **401** | Unauthorized access due to incorrect credentials. |\n| **429** | Too Many Requests - Rate limit exceeded. |\n| **500** | An internal server error occurred. |",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "handle": "memberadmin",
                  "plainPassword": "memberadmin123"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Security-Policy": {
                "schema": {
                  "type": "string",
                  "example": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                }
              },
              "Cross-Origin-Opener-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Cross-Origin-Resource-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Origin-Agent-Cluster": {
                "schema": {
                  "type": "string",
                  "example": "?1"
                }
              },
              "Referrer-Policy": {
                "schema": {
                  "type": "string",
                  "example": "no-referrer"
                }
              },
              "Strict-Transport-Security": {
                "schema": {
                  "type": "string",
                  "example": "max-age=31536000; includeSubDomains"
                }
              },
              "X-Content-Type-Options": {
                "schema": {
                  "type": "string",
                  "example": "nosniff"
                }
              },
              "X-DNS-Prefetch-Control": {
                "schema": {
                  "type": "string",
                  "example": "off"
                }
              },
              "X-Download-Options": {
                "schema": {
                  "type": "string",
                  "example": "noopen"
                }
              },
              "X-Frame-Options": {
                "schema": {
                  "type": "string",
                  "example": "SAMEORIGIN"
                }
              },
              "X-Permitted-Cross-Domain-Policies": {
                "schema": {
                  "type": "string",
                  "example": "none"
                }
              },
              "X-XSS-Protection": {
                "schema": {
                  "type": "integer",
                  "example": "0"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer",
                  "example": "5"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer",
                  "example": "4"
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Wed, 22 Jan 2025 01:10:00 GMT"
                }
              },
              "X-RateLimit-Reset": {
                "schema": {
                  "type": "integer",
                  "example": "1737508501"
                }
              },
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3ODRmMzNkODdiNzQ2Zjg0Mzc1ZGZkYiIsImlhdCI6MTczNzUwODIwMSwiZXhwIjoxNzM4MTEzMDAxfQ.gG5FS7qL4YjFtiuwDlS_CcOETF3SRvcu2ISyNLnQJYs; Max-Age=604800; Path=/; Expires=Wed, 29 Jan 2025 01:10:01 GMT; HttpOnly; SameSite=None"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "869"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"365-CkIG5M3na7nRGgIswHJtMtM6PA8\""
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Member account accessed successfully!",
                    "member": {
                      "connections": {
                        "followers": [],
                        "following": []
                      },
                      "_id": "6784f33d87b746f84375dfdb",
                      "fullName": "Member Admin",
                      "handle": "memberadmin",
                      "emailAddress": "memberadmin@gmail.com",
                      "role": "admin",
                      "aboutMe": "This ia an admin account for the members",
                      "avatar": "http://localhost:3000/media/images/avatar-1737426111915.png",
                      "coverImage": "http://localhost:3000/media/images/coverImage-1737426126001.png",
                      "posts": [],
                      "restrictedUsers": ["6784f33d87b746f84375dfdb"],
                      "createdAt": "2025-01-13T11:04:29.780Z",
                      "updatedAt": "2025-01-22T00:36:11.681Z",
                      "__v": 14,
                      "chats": [
                        "678cebf503f8856ce5a0a340",
                        "678cf378270dcc1bd0fcbe26",
                        "678cfd809c52f4e7741d2bdc",
                        "678d02bac8484f44d2477a65",
                        "678d0bdb34e5131cc787ff2a",
                        "678d0cf234e5131cc787ff39",
                        "678f137ee336c5b0de86e46f",
                        "678fcc0b11f3a21eb9a45888",
                        "67903d7bab11982537d49566"
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer",
                  "example": "5"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer",
                  "example": "0"
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Tue, 21 Jan 2025 11:16:50 GMT"
                }
              },
              "X-RateLimit-Reset": {
                "schema": {
                  "type": "integer",
                  "example": "1737458439"
                }
              },
              "Retry-After": {
                "schema": {
                  "type": "integer",
                  "example": "228"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "62"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"3e-2M8eF7i2KylaiWEY//e0fQYA/XQ\""
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "Too many login attempts, please try again later."
                }
              }
            }
          },
          "undefined": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "example": null
              }
            }
          }
        }
      }
    },
    "/getSession": {
      "get": {
        "tags": ["Authentication > GetMemberSession Endpoint"],
        "summary": "getMemberSession request",
        "description": "This endpoint allows users to retrieve their current session information by verifying the access token stored in cookies. It checks if the token is present, verifies it, and returns the member's details if valid.\n\n## Request Parameters\n\n### Body Parameters:\n\n- **None**: This endpoint does not require any body parameters.\n    \n\n| Status Code | Description |\n| --- | --- |\n| `200` | Current member session retrieved successfully |\n| `401` | Unauthorized due to missing or invalid token |\n| `404` | Member not found |\n| `500` | An internal server error occurred |",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "485"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"1e5-8MwpBiJ7aTTcdrbUeLgeLLXFjM4\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Fri, 17 Jan 2025 17:25:01 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Current member session retrieved successfully!",
                    "member": {
                      "connections": {
                        "followers": [],
                        "following": []
                      },
                      "_id": "678a83855a365753377ce8a0",
                      "fullName": "Boro Didier",
                      "handle": "borodidier",
                      "emailAddress": "borodidiern@gmail.com",
                      "role": "admin",
                      "aboutMe": "This ia an admin account for the members",
                      "avatar": "",
                      "coverImage": "",
                      "chats": [],
                      "posts": [],
                      "restrictedUsers": [],
                      "createdAt": "2025-01-17T16:21:25.456Z",
                      "updatedAt": "2025-01-17T16:21:25.456Z",
                      "__v": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/endSession": {
      "get": {
        "tags": ["Authentication > EndMemberSession Endpoint"],
        "summary": "New Request",
        "description": "This request allows users to end their current session by clearing the access and refresh token cookies. It checks if the member has an active session and responds accordingly by returning the member's information or will return no token to clear meaning no member is logged in.\n\n## Request Parameters\n\n### Body Parameters:\n\n- **None**: This endpoint does not require any body parameters.\n    \n\n| Status Code | Description |\n| --- | --- |\n| `200` | Member session ended successfully |\n| `400` | Bad request due to no active session |\n| `500` | An internal server error occurred |",
        "responses": {
          "203": {
            "description": "Non-Authoritative Information",
            "headers": {
              "Content-Security-Policy": {
                "schema": {
                  "type": "string",
                  "example": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                }
              },
              "Cross-Origin-Opener-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Cross-Origin-Resource-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Origin-Agent-Cluster": {
                "schema": {
                  "type": "string",
                  "example": "?1"
                }
              },
              "Referrer-Policy": {
                "schema": {
                  "type": "string",
                  "example": "no-referrer"
                }
              },
              "Strict-Transport-Security": {
                "schema": {
                  "type": "string",
                  "example": "max-age=31536000; includeSubDomains"
                }
              },
              "X-Content-Type-Options": {
                "schema": {
                  "type": "string",
                  "example": "nosniff"
                }
              },
              "X-DNS-Prefetch-Control": {
                "schema": {
                  "type": "string",
                  "example": "off"
                }
              },
              "X-Download-Options": {
                "schema": {
                  "type": "string",
                  "example": "noopen"
                }
              },
              "X-Frame-Options": {
                "schema": {
                  "type": "string",
                  "example": "SAMEORIGIN"
                }
              },
              "X-Permitted-Cross-Domain-Policies": {
                "schema": {
                  "type": "string",
                  "example": "none"
                }
              },
              "X-XSS-Protection": {
                "schema": {
                  "type": "integer",
                  "example": "0"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer",
                  "example": "100"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer",
                  "example": "97"
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Fri, 24 Jan 2025 04:09:44 GMT"
                }
              },
              "X-RateLimit-Reset": {
                "schema": {
                  "type": "integer",
                  "example": "1737692650"
                }
              },
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "refreshToken=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "72"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"48-lX0/F3/biEgjjo60UpVKgq7bXpc\""
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Member session ended successfully!"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/6770da82a43815513ec8d32f": {
      "get": {
        "tags": ["Member Management > getMember Endpoint"],
        "summary": "New Request",
        "description": "This request retrieves member account information by sending a GET request to the member retrieval endpoint. The request typically includes the following components\n\n## Request Parameters\n\n### Path Parameters:\n\n- **`memberId`** (String, required): The unique identifier of the member whose information is being requested.\n    \n\n### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication. This should be included in the request headers as a Bearer token.\n    \n\n| Status Code | Description |\n| --- | --- |\n| `200` | Member data retrieved successfully |\n| `401` | Unauthorized due to missing or invalid access token |\n| `404` | Member not found |\n| `500` | An internal server error occurred |",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Security-Policy": {
                "schema": {
                  "type": "string",
                  "example": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                }
              },
              "Cross-Origin-Opener-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Cross-Origin-Resource-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Origin-Agent-Cluster": {
                "schema": {
                  "type": "string",
                  "example": "?1"
                }
              },
              "Referrer-Policy": {
                "schema": {
                  "type": "string",
                  "example": "no-referrer"
                }
              },
              "Strict-Transport-Security": {
                "schema": {
                  "type": "string",
                  "example": "max-age=31536000; includeSubDomains"
                }
              },
              "X-Content-Type-Options": {
                "schema": {
                  "type": "string",
                  "example": "nosniff"
                }
              },
              "X-DNS-Prefetch-Control": {
                "schema": {
                  "type": "string",
                  "example": "off"
                }
              },
              "X-Download-Options": {
                "schema": {
                  "type": "string",
                  "example": "noopen"
                }
              },
              "X-Frame-Options": {
                "schema": {
                  "type": "string",
                  "example": "SAMEORIGIN"
                }
              },
              "X-Permitted-Cross-Domain-Policies": {
                "schema": {
                  "type": "string",
                  "example": "none"
                }
              },
              "X-XSS-Protection": {
                "schema": {
                  "type": "integer",
                  "example": "0"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer",
                  "example": "100"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer",
                  "example": "94"
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Fri, 24 Jan 2025 04:10:53 GMT"
                }
              },
              "X-RateLimit-Reset": {
                "schema": {
                  "type": "integer",
                  "example": "1737692650"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "579"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"243-ZRq48mgKFDM9smjb5OYhMUuXsPo\""
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "connections": {
                      "followers": [
                        "6770d9632caee2cc17197df2",
                        "677c90913322843f5bba09a6"
                      ],
                      "following": ["6770d9632caee2cc17197df2"]
                    },
                    "chats": [],
                    "_id": "6770da82a43815513ec8d32f",
                    "fullName": "Boro Didier Chelsea",
                    "handle": "2johndoe",
                    "emailAddress": "ejoohn@example.com",
                    "hashedPassword": "$2b$10$nJyQlX16Yy/MUZvDBwLsoO6NXt0PD7zZ93IggL6AdQ01CLhTGbYHy",
                    "aboutMe": "I am very happy to know what is going on",
                    "avatar": "",
                    "coverImage": "",
                    "posts": [],
                    "restrictedUsers": [],
                    "createdAt": "2024-12-29T05:13:38.644Z",
                    "updatedAt": "2025-01-18T03:55:50.082Z",
                    "__v": 28,
                    "role": "member"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "188"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"bc-GMMlhvyGaU37OWSjmSKCjKluNOU\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Fri, 17 Jan 2025 18:43:17 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": false,
                  "message": "Session expired. Please log in again to access the platform",
                  "error": {
                    "message": "Session expired. Please log in again to access the platform",
                    "statusCode": 401
                  }
                }
              }
            }
          }
        }
      }
    },
    "/update/678a83855a365753377ce8a0": {
      "put": {
        "tags": ["Member Management > Update Member Endpoint"],
        "summary": "New Request",
        "description": "This request allows members to update their account information by sending a PUT request to the member update endpoint. The request typically includes the following components:\n\n## Request Parameters\n\n### Path Parameters:\n\n- **`memberId`** (String, required): The unique identifier of the member whose information is being updated.\n    \n\n### Body Parameters:\n\n- **`editData`** (Object, required): An object containing the fields to be updated. The fields can include any of the member's attributes, such as:\n    \n    - **`fullName`** (String, optional): The updated full name of the member.\n        \n    - **`handle`** (String, optional): The updated username or handle of the member.\n        \n    - **`emailAddress`** (String, optional): The updated email address of the member.\n        \n    - **`aboutMe`** (String, optional): The updated description about the member.\n        \n    - **`role`** (String, optional): The updated role of the member (e.g., \"user\", \"admin\").\n        \n\n### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication. This should be included in the request headers as a Bearer token.\n    \n\n## Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `200` | Member data updated successfully |\n| `401` | Unauthorized due to missing or invalid access token |\n| `404` | Member not found |\n| `500` | An internal server error occurred |",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "fullName": "Boro Didier Chelsea"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "488"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"1e8-quKtz2ksi0LPaVBaGLbkpLIOv9c\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Wed, 08 Jan 2025 15:08:38 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "example-0": {
                    "summary": "New Request",
                    "value": {
                      "success": true,
                      "data": {
                        "connections": {
                          "followers": [
                            "6770d9632caee2cc17197df2",
                            "677c90913322843f5bba09a6"
                          ],
                          "following": ["6770d9632caee2cc17197df2"]
                        },
                        "_id": "6770da82a43815513ec8d32f",
                        "fullName": "Boro Didier Chelsea",
                        "handle": "2johndoe",
                        "emailAddress": "ejoohn@example.com",
                        "aboutMe": "I am very happy to know what is going on",
                        "avatar": "",
                        "coverImage": "",
                        "posts": [],
                        "restrictedUsers": [],
                        "createdAt": "2024-12-29T05:13:38.644Z",
                        "updatedAt": "2025-01-08T15:08:37.911Z",
                        "__v": 28,
                        "role": "member"
                      }
                    }
                  },
                  "example-1": {
                    "summary": "success",
                    "value": {
                      "success": true,
                      "data": {
                        "connections": {
                          "followers": [],
                          "following": []
                        },
                        "_id": "678a83855a365753377ce8a0",
                        "fullName": "Boro Didier Chelsea",
                        "handle": "borodidier",
                        "emailAddress": "borodidiern@gmail.com",
                        "role": "admin",
                        "aboutMe": "This ia an admin account for the members",
                        "avatar": "",
                        "coverImage": "",
                        "chats": [],
                        "posts": [],
                        "restrictedUsers": [],
                        "createdAt": "2025-01-17T16:21:25.456Z",
                        "updatedAt": "2025-01-17T19:10:32.727Z",
                        "__v": 0
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/follow/6784f33d87b746f84375dfdb": {
      "put": {
        "tags": ["Member Management > Follow Member Endpoint"],
        "summary": "Follow a Member",
        "description": "This request allows members to establish a following relationship by sending a PUT request to the follow member endpoint. The request typically includes the following components:\n\n## Request Parameters\n\n### Path Parameters:\n\n- **`memberId`** (String, required): The unique identifier of the member that the authenticated user wants to follow.\n    \n\n### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication. This should be included in the request headers as a Bearer token. The access token is stored in cookies and should be sent automatically with the request.\n    \n\n## Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `200` | Successfully followed the member |\n| `400` | Bad request due to invalid operation (e.g., following oneself or already following) |\n| `401` | Unauthorized due to missing or invalid access token |\n| `404` | Member not found |\n| `500` | An internal server error occurred |\n\n### Detailed Status Code Descriptions:\n\n- **200 OK**:\n    \n    - The member has been successfully followed.\n        \n- **400 Bad Request**:\n    \n    - The request is invalid, such as trying to follow oneself or already being connected.\n        \n- **401 Unauthorized**:\n    \n    - The request is missing an access token or the provided access token is invalid.\n        \n- **404 Not Found**:\n    \n    - The member associated with the provided member ID could not be found.\n        \n- **500 Internal Server Error**:\n    \n    - An unexpected error occurred on the server while processing the request.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": ""
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "631"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"277-GpvoZvjJUTyguI4sId51WTxYQEE\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Fri, 17 Jan 2025 20:00:51 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "You are now connected with this member",
                    "memberData": {
                      "connections": {
                        "followers": ["678a83855a365753377ce8a0"],
                        "following": []
                      },
                      "chats": [],
                      "_id": "6784f33d87b746f84375dfdb",
                      "fullName": "Member Admin",
                      "handle": "memberadmin",
                      "emailAddress": "memberadmin@gmail.com",
                      "role": "admin",
                      "aboutMe": "This ia an admin account for the members",
                      "avatar": "http://localhost:3000/media/images/avatar-1736838347010.png",
                      "coverImage": "http://localhost:3000/media/images/coverImage-1736838242430.png",
                      "posts": [],
                      "restrictedUsers": [],
                      "createdAt": "2025-01-13T11:04:29.780Z",
                      "updatedAt": "2025-01-17T20:00:51.100Z",
                      "__v": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Security-Policy": {
                "schema": {
                  "type": "string",
                  "example": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                }
              },
              "Cross-Origin-Opener-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Cross-Origin-Resource-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Origin-Agent-Cluster": {
                "schema": {
                  "type": "string",
                  "example": "?1"
                }
              },
              "Referrer-Policy": {
                "schema": {
                  "type": "string",
                  "example": "no-referrer"
                }
              },
              "Strict-Transport-Security": {
                "schema": {
                  "type": "string",
                  "example": "max-age=31536000; includeSubDomains"
                }
              },
              "X-Content-Type-Options": {
                "schema": {
                  "type": "string",
                  "example": "nosniff"
                }
              },
              "X-DNS-Prefetch-Control": {
                "schema": {
                  "type": "string",
                  "example": "off"
                }
              },
              "X-Download-Options": {
                "schema": {
                  "type": "string",
                  "example": "noopen"
                }
              },
              "X-Frame-Options": {
                "schema": {
                  "type": "string",
                  "example": "SAMEORIGIN"
                }
              },
              "X-Permitted-Cross-Domain-Policies": {
                "schema": {
                  "type": "string",
                  "example": "none"
                }
              },
              "X-XSS-Protection": {
                "schema": {
                  "type": "integer",
                  "example": "0"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer",
                  "example": "100"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer",
                  "example": "91"
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Fri, 24 Jan 2025 04:12:32 GMT"
                }
              },
              "X-RateLimit-Reset": {
                "schema": {
                  "type": "integer",
                  "example": "1737692650"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "345"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"159-EFzYZURayn4w9q+AAE053Rgg1/s\""
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": false,
                  "message": "Member cannot follow oneself",
                  "error": "BDERROR: Member cannot follow oneself\n    at MemberController.followMember (/home/boro_didier/Alx-Webstack-Portfolio_BoroHuBMedia/BoroHubMedia_Backend/controllers/memberControllers.js:154:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)"
                }
              }
            }
          }
        }
      }
    },
    "/api/member/unfollow/6784f33d87b746f84375dfdb": {
      "delete": {
        "tags": ["Member Management > Unfollow Member Endpoint"],
        "summary": "unfollow member",
        "description": "This request allows authenticated members to unfollow another member by sending a Delete request to the unfollow member endpoint. The request typically includes the following components:\n\n### Request Parameters\n\n#### Path Parameters:\n\n- **`memberId`** (String, required): The unique identifier of the member that the authenticated user wants to unfollow.\n    \n\n#### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication. This should be included in the request headers as a Bearer token. The access token is stored in cookies and should be sent automatically with the request.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `200` | Successfully unfollowed the member |\n| `400` | Bad request due to invalid operation (e.g., unfollowing oneself or not currently following) |\n| `401` | Unauthorized due to missing or invalid access token |\n| `404` | Member not found |\n| `500` | An internal server error occurred |\n\n### Detailed Status Code Descriptions:\n\n- **200 OK**:\n    \n    - The member has been successfully unfollowed.\n        \n- **400 Bad Request**:\n    \n    - The request is invalid, such as trying to unfollow oneself or not being connected with the member.\n        \n- **401 Unauthorized**:\n    \n    - The request is missing an access token or the provided access token is invalid.\n        \n- **404 Not Found**:\n    \n    - The member associated with the provided member ID could not be found.\n        \n- **500 Internal Server Error**:\n    \n    - An unexpected error occurred on the server while processing the request.",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "464"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"1d0-rOy27ROG5mH3uiY36QCnc8nAANQ\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Wed, 08 Jan 2025 15:27:32 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "example-0": {
                    "summary": "New Request",
                    "value": {
                      "success": true,
                      "data": {
                        "message": "You have successfully unfollowed this member",
                        "memberData": {
                          "connections": {
                            "followers": [],
                            "following": []
                          },
                          "_id": "677e58f666d4dc24154eb41e",
                          "fullName": "First User",
                          "handle": "firstuser1",
                          "emailAddress": "firstuser1@gmail.com",
                          "role": "member",
                          "aboutMe": "I am the first for this demo.",
                          "avatar": "",
                          "coverImage": "",
                          "posts": [],
                          "restrictedUsers": [],
                          "createdAt": "2025-01-08T10:52:38.123Z",
                          "updatedAt": "2025-01-08T15:27:32.074Z",
                          "__v": 2
                        }
                      }
                    }
                  },
                  "example-1": {
                    "summary": "success",
                    "value": {
                      "success": true,
                      "data": {
                        "message": "You have successfully unfollowed this member",
                        "memberData": {
                          "connections": {
                            "followers": [],
                            "following": []
                          },
                          "_id": "6784f33d87b746f84375dfdb",
                          "fullName": "Member Admin",
                          "handle": "memberadmin",
                          "emailAddress": "memberadmin@gmail.com",
                          "role": "admin",
                          "aboutMe": "This ia an admin account for the members",
                          "avatar": "http://localhost:3000/media/images/avatar-1736838347010.png",
                          "coverImage": "http://localhost:3000/media/images/coverImage-1736838242430.png",
                          "posts": [],
                          "restrictedUsers": [],
                          "createdAt": "2025-01-13T11:04:29.780Z",
                          "updatedAt": "2025-01-17T20:28:02.205Z",
                          "__v": 2,
                          "chats": []
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Security-Policy": {
                "schema": {
                  "type": "string",
                  "example": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                }
              },
              "Cross-Origin-Opener-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Cross-Origin-Resource-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Origin-Agent-Cluster": {
                "schema": {
                  "type": "string",
                  "example": "?1"
                }
              },
              "Referrer-Policy": {
                "schema": {
                  "type": "string",
                  "example": "no-referrer"
                }
              },
              "Strict-Transport-Security": {
                "schema": {
                  "type": "string",
                  "example": "max-age=31536000; includeSubDomains"
                }
              },
              "X-Content-Type-Options": {
                "schema": {
                  "type": "string",
                  "example": "nosniff"
                }
              },
              "X-DNS-Prefetch-Control": {
                "schema": {
                  "type": "string",
                  "example": "off"
                }
              },
              "X-Download-Options": {
                "schema": {
                  "type": "string",
                  "example": "noopen"
                }
              },
              "X-Frame-Options": {
                "schema": {
                  "type": "string",
                  "example": "SAMEORIGIN"
                }
              },
              "X-Permitted-Cross-Domain-Policies": {
                "schema": {
                  "type": "string",
                  "example": "none"
                }
              },
              "X-XSS-Protection": {
                "schema": {
                  "type": "integer",
                  "example": "0"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer",
                  "example": "100"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer",
                  "example": "90"
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Fri, 24 Jan 2025 04:13:52 GMT"
                }
              },
              "X-RateLimit-Reset": {
                "schema": {
                  "type": "integer",
                  "example": "1737692650"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "351"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"15f-sto2OLkBZlOvWZW0ZrWofc+3sPU\""
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": false,
                  "message": "Member cannot unfollow oneself",
                  "error": "BDERROR: Member cannot unfollow oneself\n    at MemberController.unfollowMember (/home/boro_didier/Alx-Webstack-Portfolio_BoroHuBMedia/BoroHubMedia_Backend/controllers/memberControllers.js:209:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)"
                }
              }
            }
          }
        }
      }
    },
    "/restricted/": {
      "post": {
        "tags": ["Member Management > RestrictedMember Endpoint"],
        "summary": "New Request",
        "description": "This endpoint enables members to restrict another member by their member ID.\n\n### Request Body Parameters:\n\n- **`restrictedUser Id`** (String, required): The unique identifier of the member to be restricted.\n    \n\n### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `200` | Successfully restricted the user |\n| `400` | Bad request due to invalid input or self-restriction |\n| `404` | Restricted user or member not found |\n| `500` | An internal server error occurred |\n\n### Detailed Status Code Descriptions:\n\n- **200 OK**:\n    \n    - The user has been successfully restricted, and the updated member data is returned.\n        \n- **400 Bad Request**:\n    \n    - The request is invalid due to self-restriction or the user already being restricted.\n        \n- **404 Not Found**:\n    \n    - The specified restricted user ID or member ID does not exist in the database.\n        \n- **500 Internal Server Error**:\n    \n    - An unexpected error occurred while processing the request.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "restrictedUserId": "6784f33d87b746f84375dfdb"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "545"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"221-TO8UleXMij7R5Wg3oWe4T1g89qM\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Sat, 18 Jan 2025 01:09:32 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "You have successfully restricted this user",
                    "memberData": {
                      "connections": {
                        "followers": [],
                        "following": ["677e58f666d4dc24154eb41e"]
                      },
                      "_id": "678a83855a365753377ce8a0",
                      "fullName": "Boro Didier Chelsea",
                      "handle": "borodidier",
                      "emailAddress": "borodidiern@gmail.com",
                      "role": "admin",
                      "aboutMe": "This ia an admin account for the members",
                      "avatar": "",
                      "coverImage": "",
                      "chats": [],
                      "posts": [],
                      "restrictedUsers": ["677c90913322843f5bba09a6"],
                      "createdAt": "2025-01-17T16:21:25.456Z",
                      "updatedAt": "2025-01-18T01:09:31.298Z",
                      "__v": 4
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Security-Policy": {
                "schema": {
                  "type": "string",
                  "example": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                }
              },
              "Cross-Origin-Opener-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Cross-Origin-Resource-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Origin-Agent-Cluster": {
                "schema": {
                  "type": "string",
                  "example": "?1"
                }
              },
              "Referrer-Policy": {
                "schema": {
                  "type": "string",
                  "example": "no-referrer"
                }
              },
              "Strict-Transport-Security": {
                "schema": {
                  "type": "string",
                  "example": "max-age=31536000; includeSubDomains"
                }
              },
              "X-Content-Type-Options": {
                "schema": {
                  "type": "string",
                  "example": "nosniff"
                }
              },
              "X-DNS-Prefetch-Control": {
                "schema": {
                  "type": "string",
                  "example": "off"
                }
              },
              "X-Download-Options": {
                "schema": {
                  "type": "string",
                  "example": "noopen"
                }
              },
              "X-Frame-Options": {
                "schema": {
                  "type": "string",
                  "example": "SAMEORIGIN"
                }
              },
              "X-Permitted-Cross-Domain-Policies": {
                "schema": {
                  "type": "string",
                  "example": "none"
                }
              },
              "X-XSS-Protection": {
                "schema": {
                  "type": "integer",
                  "example": "0"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer",
                  "example": "100"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer",
                  "example": "89"
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Fri, 24 Jan 2025 04:15:04 GMT"
                }
              },
              "X-RateLimit-Reset": {
                "schema": {
                  "type": "integer",
                  "example": "1737692650"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "355"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"163-Xd9gUtKk5LmA7pX48WFkyJXj1oQ\""
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": false,
                  "message": "This user is already restricted",
                  "error": "BDERROR: This user is already restricted\n    at MemberController.restrictedMember (/home/boro_didier/Alx-Webstack-Portfolio_BoroHuBMedia/BoroHubMedia_Backend/controllers/memberControllers.js:283:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)"
                }
              }
            }
          }
        }
      }
    },
    "/unrestricted/": {
      "delete": {
        "tags": ["Member Management > UnrestrictedMember Endpoint"],
        "summary": "New Request",
        "description": "This request allows members to unrestrict another member by sending a POST request to the unrestrict member endpoint. The request typically includes the following components:\n\n### Request Parameters\n\n#### Body Parameters:\n\n- **`restrictedUser Id`** (String, required): The unique identifier of the member that the authenticated member wants to unrestrict.\n    \n\n### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication. This should be included in the request headers as a Bearer token. The access token is stored in cookies and should be sent automatically with the request.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `200` | Successfully unrestricted the member |\n| `400` | Bad request due to invalid operation (e.g., unrestricting oneself or user not restricted) |\n| `401` | Unauthorized due to missing or invalid access token |\n| `404` | Member not found |\n| `500` | An internal server error occurred |\n\n### Detailed Status Code Descriptions:\n\n- **200 OK**:\n    \n    - The member has been successfully unrestricted.\n        \n- **400 Bad Request**:\n    \n    - The request is invalid, such as trying to unrestrict oneself or the user is not currently restricted.\n        \n- **401 Unauthorized**:\n    \n    - The request is missing an access token or the provided access token is invalid.\n        \n- **404 Not Found**:\n    \n    - The member associated with the provided restricted user ID could not be found.\n        \n- **500 Internal Server Error**:\n    \n    - An unexpected error occurred on the server while processing the request.",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "547"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"223-dGnePDEdkVw0y7Iy1iwtueqxJbw\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Sat, 18 Jan 2025 01:31:27 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "You have successfully unrestricted this user",
                    "memberData": {
                      "connections": {
                        "followers": [],
                        "following": ["677e58f666d4dc24154eb41e"]
                      },
                      "_id": "678a83855a365753377ce8a0",
                      "fullName": "Boro Didier Chelsea",
                      "handle": "borodidier",
                      "emailAddress": "borodidiern@gmail.com",
                      "role": "admin",
                      "aboutMe": "This ia an admin account for the members",
                      "avatar": "",
                      "coverImage": "",
                      "chats": [],
                      "posts": [],
                      "restrictedUsers": ["677c90913322843f5bba09a6"],
                      "createdAt": "2025-01-17T16:21:25.456Z",
                      "updatedAt": "2025-01-18T01:31:26.967Z",
                      "__v": 6
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/restricted-list/677e58f666d4dc24154eb41e": {
      "get": {
        "tags": ["Member Management > GetRestrictedList Endpoint"],
        "summary": "New Request",
        "description": "This request allows authenticated members to get their restricted member and admin can see all member blocked list by sending a GET request to the restricted list endpoint. The request typically includes the following components:\n\n### Request Parameters\n\n#### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication. This should be included in the request headers as a Bearer token. The access token is stored in cookies and should be sent automatically with the request.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `200` | Successfully retrieved the restricted member list |\n| `404` | Member not found |\n| `500` | An internal server error occurred |",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "72"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"48-bSRbS1YJcb88VR/ScTBQ7KwBQ0s\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Mon, 13 Jan 2025 11:26:49 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "example-0": {
                    "summary": "admin",
                    "value": {
                      "success": true,
                      "data": {
                        "restrictedUsers": ["677c90913322843f5bba09a6"]
                      }
                    }
                  },
                  "example-1": {
                    "summary": "New Request",
                    "value": {
                      "success": true,
                      "data": {
                        "restrictedUsers": ["677c90913322843f5bba09a6"]
                      }
                    }
                  },
                  "example-2": {
                    "summary": "New Request",
                    "value": {
                      "success": true,
                      "data": {
                        "restrictedUsers": ["677c90913322843f5bba09a6"]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "194"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"c2-CtLkMPNdkY7WOFQeMyFUYS1VVw0\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Mon, 13 Jan 2025 11:25:41 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": false,
                  "message": "Admin privileges required. Only an admin can perform rhis task",
                  "error": {
                    "message": "Admin privileges required. Only an admin can perform rhis task",
                    "statusCode": 403
                  }
                }
              }
            }
          }
        }
      }
    },
    "/followers/6770da82a43815513ec8d32f": {
      "get": {
        "tags": ["Member Management > Get Followers List"],
        "summary": "Get followers list Endpoint",
        "description": "This request retrieves the list of followers for a specific member within the application. It provides details about each follower, allowing the member to view and manage their follower interactions effectively.\n\n**Access Permissions:**  \nAll users can access their own followers list without requiring admin privileges.\n\n**Example Scenarios:**\n\n1. **Member Access:** When a member requests their own followers list, the endpoint successfully returns the details of all their followers, enabling them to see who is following them.\n    \n2. **Member and oher Members follower list:** Members can access the followers list of other members",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "93"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"5d-nv55i5vLxbohj14AWIgyNUSdj2E\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Mon, 13 Jan 2025 11:56:13 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "followers": [
                      "6770d9632caee2cc17197df2",
                      "677c90913322843f5bba09a6"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/avatarUpload/": {
      "post": {
        "tags": ["Member Management > Upload Member's Profile Picture"],
        "summary": "New Request",
        "description": "This request allows a member to upload a new profile picture (avatar) for their account. It updates the member's avatar URL in the database and returns the updated member data.\n\n**Path Parameters:**\n\n- Is this case there are no path parameters because the member ID is not included in the URL. When, the member ID is derived from the authenticated token (JWT). When a member logs in, their member ID is encoded into the token. Upon making the request, the server decodes the token to identify the member making the request.  \n    Since the member ID is validated through the authentication process, it ensures that only the logged-in member can update their own profile photo without needing to specify their ID explicitly in the URL.\n    \n\n**Request Body:**\n\n- **File**: An image file to be uploaded as the member's profile picture. The request must be made as `multipart/form-data`.\n    \n\n**Status Codes:**\n\n- **200 OK**: The cover photo was successfully updated, and the updated member data is returned.\n    \n- **400 Bad Request**: The request is missing a file or the uploaded file is invalid.\n    \n- **404 Not Found**: The specified member ID does not exist in the database.\n    \n- **500 Internal Server Error**: An unexpected error occurred while processing the request.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "type": "string",
                    "description": "First file",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "575"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"23f-7r/HKJvJQTolLV2sqKDfHnTBqa8\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Tue, 14 Jan 2025 07:05:47 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Profile picture updated",
                    "member": {
                      "connections": {
                        "followers": [],
                        "following": []
                      },
                      "_id": "6784f33d87b746f84375dfdb",
                      "fullName": "Member Admin",
                      "handle": "memberadmin",
                      "emailAddress": "memberadmin@gmail.com",
                      "role": "admin",
                      "aboutMe": "This ia an admin account for the members",
                      "avatar": "http://localhost:3000/media/images/avatar-1736838347010.png",
                      "coverImage": "http://localhost:3000/media/images/coverImage-1736838242430.png",
                      "posts": [],
                      "restrictedUsers": [],
                      "createdAt": "2025-01-13T11:04:29.780Z",
                      "updatedAt": "2025-01-14T07:05:47.255Z",
                      "__v": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/coverImageUpload/": {
      "put": {
        "tags": ["Member Management > Upload Member's Cover Photo"],
        "summary": "New Request",
        "description": "This endpoint allows a user to upload a new cover photo for their account. It updates the member's cover image URL in the database and returns the updated member data.\n\n**Path Parameters:**\n\n- Same as in the profile picture, there are no path parameters because the member ID is not included in the URL. Instead, the member ID is derived from the authenticated token . When a member logs in, their member ID is encoded into the token. Upon making the request, the server decodes the token to identify the member making the request.  \n    Since the member ID is validated through the authentication process, it ensures that only the logged-in member can update their own cover photo without needing to specify their ID explicitly in the URL.\n    \n\n**Request Body:**\n\n- **File**: An image file to be uploaded as the member's cover photo. The request must be made as `multipart/form-data`.\n    \n\n**Status Codes:**\n\n- **200 OK**: The cover photo was successfully updated, and the updated member data is returned.\n    \n- **400 Bad Request**: The request is missing a file or the uploaded file is invalid.\n    \n- **404 Not Found**: The specified member ID does not exist in the database.\n    \n- **500 Internal Server Error**: An unexpected error occurred while processing the request.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "coverImage": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "640"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"280-BUWdPC2nWcMWB0LCan8x4P8CahA\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Sat, 18 Jan 2025 03:30:42 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Cover image updated",
                    "member": {
                      "connections": {
                        "followers": [],
                        "following": ["677e58f666d4dc24154eb41e"]
                      },
                      "_id": "678a83855a365753377ce8a0",
                      "fullName": "Boro Didier Chelsea",
                      "handle": "borodidier",
                      "emailAddress": "borodidiern@gmail.com",
                      "role": "admin",
                      "aboutMe": "This ia an admin account for the members",
                      "avatar": "http://localhost:3000/media/images/avatar-1737170017654.png",
                      "coverImage": "http://localhost:3000/media/images/coverImage-1737171041738.png",
                      "chats": [],
                      "posts": [],
                      "restrictedUsers": ["677c90913322843f5bba09a6"],
                      "createdAt": "2025-01-17T16:21:25.456Z",
                      "updatedAt": "2025-01-18T03:30:42.148Z",
                      "__v": 6
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/refresh-token": {
      "post": {
        "tags": ["Member Management > Refresh accessToken Endpoint"],
        "summary": "New Request",
        "description": "This request allows members to refresh their access tokens by sending a POST request to the refresh token endpoint. The request typically includes the following components:\n\n## Request Parameters\n\n### Body Parameters:\n\n- **None**: This endpoint does not require any body parameters.\n    \n\n### Cookies:\n\n- **`refreshToken`** (String, required): The refresh token stored in cookies that is used to generate a new access token.\n    \n\n## Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `200` | Access token refreshed successfully |\n| `401` | Unauthorized due to missing or invalid refresh token |\n| `404` | Member not found |\n| `500` | An internal server error occurred |\n\n### Detailed Status Code Descriptions:\n\n- **200 OK**:\n    \n    - The access token has been successfully refreshed.\n        \n- **401 Unauthorized**:\n    \n    - The request is missing a refresh token or the provided refresh token is invalid.\n        \n- **404 Not Found**:\n    \n    - The member associated with the refresh token could not be found.\n        \n- **500 Internal Server Error**:\n    \n    - An unexpected error occurred on the server while processing the request.",
        "requestBody": {
          "content": {}
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "accessToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3ODRmMzNkODdiNzQ2Zjg0Mzc1ZGZkYiIsImhhbmRsZSI6Im1lbWJlcmFkbWluIiwiaWF0IjoxNzM3MTAxNjU2LCJleHAiOjE3MzcxMDE3MTZ9.9xI6fDQt9QlGf9g4-CAqLFxJAbeNCkhzj3Sn-yFjT4Y; Max-Age=3600; Path=/; Expires=Fri, 17 Jan 2025 09:14:16 GMT; HttpOnly; SameSite=None"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "74"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"4a-oGqzRAKZhqupp7UC2ZeE2QFCZX0\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Fri, 17 Jan 2025 08:14:16 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "example-0": {
                    "summary": "success",
                    "value": {
                      "success": true,
                      "data": {
                        "message": "Access token refreshed successfully!"
                      }
                    }
                  },
                  "example-1": {
                    "summary": "success",
                    "value": {
                      "success": true,
                      "data": {
                        "message": "Access token refreshed successfully!"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/delete/67727074e8771a8cd1fd3378": {
      "delete": {
        "tags": ["Member Management > Delete Member endpoint"],
        "summary": "New Request",
        "description": "This request allows an admin to delete a member by sending a DELETE request to the delete member endpoint. The request typically includes the following components:\n\n### Request Parameters\n\n#### Path Parameters:\n\n- **`memberId`** (String, required): The unique identifier of the member that the admin wants to delete.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `200` | Successfully deleted the member and associated data |\n| `404` | Member not found |\n| `500` | An internal server error occurred |\n\n### Detailed Status Code Descriptions:\n\n- **200 OK**:\n    \n    - The member and all associated data have been successfully deleted.\n        \n- **404 Not Found**:\n    \n    - The member associated with the provided member ID could not be found.\n        \n- **500 Internal Server Error**:\n    \n    - An unexpected error occurred on the server while processing the request.",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "86"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"56-iJYjIOzvIBPXGk7WuXfabQEtV3I\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Sat, 18 Jan 2025 03:55:52 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Member and associated data deleted successfully."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/create-content-images/6784f33d87b746f84375dfdb": {
      "post": {
        "tags": ["Content Post Management > Create Post With Images Endpoint"],
        "summary": "New Request",
        "description": "This request allows members to create a new content post with images by sending a POST request to the content creation endpoint. The request typically includes the following components:\n\n### Request Parameters\n\n#### Body Parameters:\n\n- **`content`** (String, required): The text content of the post.\n    \n\n#### File Uploads:\n\n- **`files`** (Array, required): An array of media files uploaded with the request. The endpoint requires at least four files and allows a maximum of ten.\n    \n\n### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication. This should be included in the request headers as a Bearer token.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `201` | Successfully created the content post with images |\n| `400` | Bad request due to missing fields, invalid input, or file upload issues |\n| `404` | Member not found |\n| `500` | An internal server error occurred |\n\n### Detailed Status Code Descriptions:\n\n- **201 Created**:\n    \n    - The content post with images has been successfully created.\n        \n- **400 Bad Request**:\n    \n    - The request is invalid due to missing content, insufficient media files, or exceeding the file upload limit.\n        \n- **404 Not Found**:\n    \n    - The member associated with the provided member ID could not be found.\n        \n- **500 Internal Server Error**:\n    \n    - An unexpected error occurred on the server while processing the request.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "example": "This is my test post with Images"
                  },
                  "media": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "1160"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"488-k71BSdM9/+jPN1Hj3a17atYPcKs\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Sat, 18 Jan 2025 04:33:26 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Post with media created successfully!",
                    "post": {
                      "author": "678a83855a365753377ce8a0",
                      "content": "This is my test post with Images",
                      "media": [
                        "http://localhost:3000/media/images/media-1737174805535.jpg",
                        "http://localhost:3000/media/images/media-1737174805535.png",
                        "http://localhost:3000/media/images/media-1737174805548.png",
                        "http://localhost:3000/media/images/media-1737174805554.png"
                      ],
                      "likes": [],
                      "comments": [],
                      "likeCount": 0,
                      "_id": "678b2f15c64fa8354700fe29",
                      "createdAt": "2025-01-18T04:33:25.881Z",
                      "updatedAt": "2025-01-18T04:33:25.881Z",
                      "__v": 0
                    },
                    "member": {
                      "connections": {
                        "followers": [],
                        "following": ["677e58f666d4dc24154eb41e"]
                      },
                      "_id": "678a83855a365753377ce8a0",
                      "fullName": "Boro Didier Chelsea",
                      "handle": "borodidier",
                      "emailAddress": "borodidiern@gmail.com",
                      "role": "admin",
                      "aboutMe": "This ia an admin account for the members",
                      "avatar": "http://localhost:3000/media/images/avatar-1737170017654.png",
                      "coverImage": "http://localhost:3000/media/images/coverImage-1737171041738.png",
                      "chats": [],
                      "posts": [],
                      "restrictedUsers": ["677c90913322843f5bba09a6"],
                      "createdAt": "2025-01-17T16:21:25.456Z",
                      "updatedAt": "2025-01-18T03:55:50.082Z",
                      "__v": 6
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/update-content/678f0df86951444567304336": {
      "put": {
        "tags": ["Content Post Management > Update Content"],
        "summary": "New Request",
        "description": "This request allows members to update a content post by sending a PUT request to the content update endpoint. The request typically includes the following components:\n\n### Request Parameters\n\n#### Path Parameters:\n\n- **`postId`** (String, required): The unique identifier of the post that the member wants to update.\n    \n\n#### Body Parameters:\n\n- **`content`** (String, optional): The new text content for the post.\n    \n\n#### File Uploads:\n\n- **`files`** (Array, optional): An array of media files uploaded with the request. If provided, at least four files must be uploaded, and a maximum of ten files is allowed.\n    \n\n### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication. This should be included in the request headers as a Bearer token.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `200` | Successfully updated the content post |\n| `400` | Bad request due to missing fields or invalid input |\n| `403` | Unauthorized access to update the post |\n| `404` | Post not found |\n| `500` | An internal server error occurred |\n\n### Detailed Status Code Descriptions:\n\n- **200 OK**:\n    \n    - The content post has been successfully updated.\n        \n- **400 Bad Request**:\n    \n    - The request is invalid due to insufficient media files or other input issues.\n        \n- **403 Forbidden**:\n    \n    - The member is not authorized to update the post because they are not the author.\n        \n- **404 Not Found**:\n    \n    - The post associated with the provided post ID could not be found.\n        \n- **500 Internal Server Error**:\n    \n    - An unexpected error occurred on the server while processing the request.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "example": "Here is a test to see if my files are updated with images It has given me issues all day"
                  },
                  "media": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "869"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"365-35mLGUtUi8/44Yyg4d6H2wfnJmQ\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Sat, 18 Jan 2025 05:01:48 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Content updated successfully!",
                    "post": {
                      "_id": "678b2f15c64fa8354700fe29",
                      "author": "678a83855a365753377ce8a0",
                      "content": "Here is a test to see if my files are updated with images It has given me issues all day",
                      "media": [
                        "http://localhost:3000/media/images/media-1737174805535.jpg",
                        "http://localhost:3000/media/images/media-1737174805535.png",
                        "http://localhost:3000/media/images/media-1737174805548.png",
                        "http://localhost:3000/media/images/media-1737174805554.png",
                        "http://localhost:3000/media/images/media-1737176508261.png",
                        "http://localhost:3000/media/images/media-1737176508264.png",
                        "http://localhost:3000/media/images/media-1737176508265.jpg",
                        "http://localhost:3000/media/images/media-1737176508266.png"
                      ],
                      "likes": [],
                      "comments": [],
                      "likeCount": 0,
                      "createdAt": "2025-01-18T04:33:25.881Z",
                      "updatedAt": "2025-01-18T05:01:48.616Z",
                      "__v": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Security-Policy": {
                "schema": {
                  "type": "string",
                  "example": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                }
              },
              "Cross-Origin-Opener-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Cross-Origin-Resource-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Origin-Agent-Cluster": {
                "schema": {
                  "type": "string",
                  "example": "?1"
                }
              },
              "Referrer-Policy": {
                "schema": {
                  "type": "string",
                  "example": "no-referrer"
                }
              },
              "Strict-Transport-Security": {
                "schema": {
                  "type": "string",
                  "example": "max-age=31536000; includeSubDomains"
                }
              },
              "X-Content-Type-Options": {
                "schema": {
                  "type": "string",
                  "example": "nosniff"
                }
              },
              "X-DNS-Prefetch-Control": {
                "schema": {
                  "type": "string",
                  "example": "off"
                }
              },
              "X-Download-Options": {
                "schema": {
                  "type": "string",
                  "example": "noopen"
                }
              },
              "X-Frame-Options": {
                "schema": {
                  "type": "string",
                  "example": "SAMEORIGIN"
                }
              },
              "X-Permitted-Cross-Domain-Policies": {
                "schema": {
                  "type": "string",
                  "example": "none"
                }
              },
              "X-XSS-Protection": {
                "schema": {
                  "type": "integer",
                  "example": "0"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer",
                  "example": "100"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer",
                  "example": "78"
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Fri, 24 Jan 2025 04:22:50 GMT"
                }
              },
              "X-RateLimit-Reset": {
                "schema": {
                  "type": "integer",
                  "example": "1737692650"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "110"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"6e-dEbjARpzhPnpd6VffWanUSnrm4Q\""
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": false,
                  "message": "Internal Server Error",
                  "error": "Unauthorized: You can only update your own posts"
                }
              }
            }
          }
        }
      }
    },
    "/like-content/6787d9f3c0e4b464b7f8c952": {
      "put": {
        "tags": ["Content Post Management > Like A Content Post"],
        "summary": "New Request",
        "description": "This endpoint allows members to like a specific content or post . From the example responds we see that the Likecount has increased by 1 meaning it was successful\n\n**Path Parameters:**\n\n- `postId` (string): The unique identifier of the content post to be liked.\n    \n\n**Request Body:**\n\n- None because once member is logged in , the _id is aded automatically from the token\n    \n\n**Status Codes:**\n\n- **200 OK**: The post was liked successfully, and the updated post data is returned.\n    \n- **400 Bad Request**:\n    \n    - The member has already liked this post.\n        \n- **404 Not Found**:\n    \n    - The specified member ID does not exist.\n        \n    - The specified post ID does not exist.\n        \n- **500 Internal Server Error**: An unexpected error occurred during the process.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "memberId": "6770da82a43815513ec8d32f"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "890"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"37a-EpudEq0/ZlQa0fmWL8sMHBfEjpk\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Sat, 18 Jan 2025 05:25:09 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "example-0": {
                    "summary": "sucess",
                    "value": {
                      "success": true,
                      "data": {
                        "message": "Post liked successfully!",
                        "post": {
                          "_id": "678b2f15c64fa8354700fe29",
                          "author": "678a83855a365753377ce8a0",
                          "content": "Here is a test to see if my files are updated with images It has given me issues all day",
                          "media": [
                            "http://localhost:3000/media/images/media-1737174805535.jpg",
                            "http://localhost:3000/media/images/media-1737174805535.png",
                            "http://localhost:3000/media/images/media-1737174805548.png",
                            "http://localhost:3000/media/images/media-1737174805554.png",
                            "http://localhost:3000/media/images/media-1737176508261.png",
                            "http://localhost:3000/media/images/media-1737176508264.png",
                            "http://localhost:3000/media/images/media-1737176508265.jpg",
                            "http://localhost:3000/media/images/media-1737176508266.png"
                          ],
                          "likes": ["678a83855a365753377ce8a0"],
                          "comments": [],
                          "likeCount": 1,
                          "createdAt": "2025-01-18T04:33:25.881Z",
                          "updatedAt": "2025-01-18T05:25:09.662Z",
                          "__v": 2
                        }
                      }
                    }
                  },
                  "example-1": {
                    "summary": "sucess",
                    "value": {
                      "success": true,
                      "data": {
                        "message": "Post liked successfully!",
                        "post": {
                          "_id": "6787d9f3c0e4b464b7f8c952",
                          "author": "6784f33d87b746f84375dfdb",
                          "content": "This is my test post with Images",
                          "media": [
                            "http://localhost:3000/media/images/media-1736956402939.jpg",
                            "http://localhost:3000/media/images/media-1736956402940.png",
                            "http://localhost:3000/media/images/media-1736956402957.png",
                            "http://localhost:3000/media/images/media-1736956402966.png"
                          ],
                          "likes": ["678a83855a365753377ce8a0"],
                          "comments": ["6787dd79c0e4b464b7f8c957"],
                          "likeCount": 1,
                          "createdAt": "2025-01-15T15:53:23.289Z",
                          "updatedAt": "2025-01-18T05:34:04.601Z",
                          "__v": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Security-Policy": {
                "schema": {
                  "type": "string",
                  "example": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                }
              },
              "Cross-Origin-Opener-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Cross-Origin-Resource-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Origin-Agent-Cluster": {
                "schema": {
                  "type": "string",
                  "example": "?1"
                }
              },
              "Referrer-Policy": {
                "schema": {
                  "type": "string",
                  "example": "no-referrer"
                }
              },
              "Strict-Transport-Security": {
                "schema": {
                  "type": "string",
                  "example": "max-age=31536000; includeSubDomains"
                }
              },
              "X-Content-Type-Options": {
                "schema": {
                  "type": "string",
                  "example": "nosniff"
                }
              },
              "X-DNS-Prefetch-Control": {
                "schema": {
                  "type": "string",
                  "example": "off"
                }
              },
              "X-Download-Options": {
                "schema": {
                  "type": "string",
                  "example": "noopen"
                }
              },
              "X-Frame-Options": {
                "schema": {
                  "type": "string",
                  "example": "SAMEORIGIN"
                }
              },
              "X-Permitted-Cross-Domain-Policies": {
                "schema": {
                  "type": "string",
                  "example": "none"
                }
              },
              "X-XSS-Protection": {
                "schema": {
                  "type": "integer",
                  "example": "0"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer",
                  "example": "100"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer",
                  "example": "98"
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Fri, 24 Jan 2025 04:25:46 GMT"
                }
              },
              "X-RateLimit-Reset": {
                "schema": {
                  "type": "integer",
                  "example": "1737693616"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "94"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"5e-lA892AwlfW4CYHiZOPxlqBDiBKU\""
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": false,
                  "message": "Internal Server Error",
                  "error": "You have already liked this post"
                }
              }
            }
          }
        }
      }
    },
    "/unlike-content/6787d9f3c0e4b464b7f8c952": {
      "put": {
        "tags": ["Content Post Management > Unlike Content Post Endpoint"],
        "summary": "New Request",
        "description": "This request allows users to unlike or dislike a specific content post\n\nFrom the example responds we see that the Likecount has decreased by 1 meaning it was successful\n\n**Path Parameters:**\n\n- `postId` (string): The unique identifier of the content post to be unliked.\n    \n\n**Request Body:**\n\n- None, the member id is gotten from the token when the member is authenticated or has logged in\n    \n\n**Status Codes:**\n\n- **200 OK**: The post was unliked successfully, and the updated post data is returned.\n    \n- **400 Bad Request**:\n    \n    - The member has not liked this post.\n        \n- **404 Not Found**:\n    \n    - The specified member ID does not exist.\n        \n    - The specified post ID does not exist.\n        \n- **500 Internal Server Error**: An unexpected error occurred during the process.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "memberId": "6770da82a43815513ec8d32f"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "618"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"26a-tc2CTYT0a60Aj7d6BrzePvMKgiM\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Sat, 18 Jan 2025 05:34:39 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Post unliked successfully!",
                    "post": {
                      "_id": "6787d9f3c0e4b464b7f8c952",
                      "author": "6784f33d87b746f84375dfdb",
                      "content": "This is my test post with Images",
                      "media": [
                        "http://localhost:3000/media/images/media-1736956402939.jpg",
                        "http://localhost:3000/media/images/media-1736956402940.png",
                        "http://localhost:3000/media/images/media-1736956402957.png",
                        "http://localhost:3000/media/images/media-1736956402966.png"
                      ],
                      "likes": ["678a83855a365753377ce8a0"],
                      "comments": ["6787dd79c0e4b464b7f8c957"],
                      "likeCount": 0,
                      "createdAt": "2025-01-15T15:53:23.289Z",
                      "updatedAt": "2025-01-18T05:34:39.145Z",
                      "__v": 2
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/delete-content/678f0d55a68902e903eb061d": {
      "delete": {
        "tags": ["Content Post Management > Delete Content Post"],
        "summary": "successful",
        "description": "This request deletes a specific content post within the API. It ensures that the member is the author of the post and then deletes the post along with its associated comments and likes.\n\n### Request Parameters:\n\n- **`postId`** (String, required): The ID of the post to delete.\n    \n\n### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `200` | Successfully deleted the content post |\n| `403` | Unauthorized access to delete the post |\n| `404` | Post not found |\n| `500` | An internal server error occurred |\n\n### Detailed Status Code Descriptions:\n\n- **200 OK**:\n    \n    - The content post was successfully deleted, and the response includes a success message.\n        \n- **403 Forbidden**:\n    \n    - The member is not authorized to delete the post, as they are not the author.\n        \n- **404 Not Found**:\n    \n    - The specified post ID does not exist in the database.\n        \n- **500 Internal Server Error**:\n    \n    - An unexpected error occurred while processing the request.",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "67"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"43-a+hwUC0m0z7URodt/Iys5XDQq6Q\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Wed, 15 Jan 2025 00:00:16 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Content deleted successfully!"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "Content-Security-Policy": {
                "schema": {
                  "type": "string",
                  "example": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                }
              },
              "Cross-Origin-Opener-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Cross-Origin-Resource-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Origin-Agent-Cluster": {
                "schema": {
                  "type": "string",
                  "example": "?1"
                }
              },
              "Referrer-Policy": {
                "schema": {
                  "type": "string",
                  "example": "no-referrer"
                }
              },
              "Strict-Transport-Security": {
                "schema": {
                  "type": "string",
                  "example": "max-age=31536000; includeSubDomains"
                }
              },
              "X-Content-Type-Options": {
                "schema": {
                  "type": "string",
                  "example": "nosniff"
                }
              },
              "X-DNS-Prefetch-Control": {
                "schema": {
                  "type": "string",
                  "example": "off"
                }
              },
              "X-Download-Options": {
                "schema": {
                  "type": "string",
                  "example": "noopen"
                }
              },
              "X-Frame-Options": {
                "schema": {
                  "type": "string",
                  "example": "SAMEORIGIN"
                }
              },
              "X-Permitted-Cross-Domain-Policies": {
                "schema": {
                  "type": "string",
                  "example": "none"
                }
              },
              "X-XSS-Protection": {
                "schema": {
                  "type": "integer",
                  "example": "0"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer",
                  "example": "100"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer",
                  "example": "76"
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Fri, 24 Jan 2025 04:24:07 GMT"
                }
              },
              "X-RateLimit-Reset": {
                "schema": {
                  "type": "integer",
                  "example": "1737692650"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "76"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"4c-L6I374RmVcSfyHLAM0Iv8TSW+Oo\""
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": false,
                  "message": "Internal Server Error",
                  "error": "Post not found"
                }
              }
            }
          }
        }
      }
    },
    "/get-content/678f0df86951444567304336": {
      "get": {
        "tags": ["Content Post Management > Retrieve Post"],
        "summary": "New Request",
        "description": "This request retrieves a specific content post within the API. It fetches the post details using the provided post ID and returns the post along with the author's information.\n\n**Request Params**:\n\n- **postId** (String, required): The ID of the post to retrieve.\n    \n\n**Request Headers**:\n\n- **Authorization** (String, required): The access token used for authentication.\n    \n\n---\n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| 200 | Successfully retrieved the content post. |\n| 404 | Post not found. |\n| 500 | An internal server error occurred. |",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Security-Policy": {
                "schema": {
                  "type": "string",
                  "example": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                }
              },
              "Cross-Origin-Opener-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Cross-Origin-Resource-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Origin-Agent-Cluster": {
                "schema": {
                  "type": "string",
                  "example": "?1"
                }
              },
              "Referrer-Policy": {
                "schema": {
                  "type": "string",
                  "example": "no-referrer"
                }
              },
              "Strict-Transport-Security": {
                "schema": {
                  "type": "string",
                  "example": "max-age=31536000; includeSubDomains"
                }
              },
              "X-Content-Type-Options": {
                "schema": {
                  "type": "string",
                  "example": "nosniff"
                }
              },
              "X-DNS-Prefetch-Control": {
                "schema": {
                  "type": "string",
                  "example": "off"
                }
              },
              "X-Download-Options": {
                "schema": {
                  "type": "string",
                  "example": "noopen"
                }
              },
              "X-Frame-Options": {
                "schema": {
                  "type": "string",
                  "example": "SAMEORIGIN"
                }
              },
              "X-Permitted-Cross-Domain-Policies": {
                "schema": {
                  "type": "string",
                  "example": "none"
                }
              },
              "X-XSS-Protection": {
                "schema": {
                  "type": "integer",
                  "example": "0"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer",
                  "example": "100"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer",
                  "example": "96"
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Wed, 22 Jan 2025 01:13:24 GMT"
                }
              },
              "X-RateLimit-Reset": {
                "schema": {
                  "type": "integer",
                  "example": "1737509296"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "899"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"383-ZUFxNCwlgDJOWSNoGBf2a4Sg0b4\""
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Post retrieved successfully!",
                    "post": {
                      "_id": "678f0df86951444567304336",
                      "author": {
                        "_id": "6784f33d87b746f84375dfdb",
                        "handle": "memberadmin"
                      },
                      "content": "Here is a test to see if my files are updated with images It has given me issues all day",
                      "media": [
                        "http://localhost:3000/media/images/media-1737428472313.jpg",
                        "http://localhost:3000/media/images/media-1737428472313.png",
                        "http://localhost:3000/media/images/media-1737428472326.png",
                        "http://localhost:3000/media/images/media-1737428472333.png",
                        "http://localhost:3000/media/images/media-1737428577040.png",
                        "http://localhost:3000/media/images/media-1737428577044.png",
                        "http://localhost:3000/media/images/media-1737428577044.jpg",
                        "http://localhost:3000/media/images/media-1737428577045.png"
                      ],
                      "likes": [],
                      "comments": [],
                      "likeCount": 0,
                      "createdAt": "2025-01-21T03:01:12.684Z",
                      "updatedAt": "2025-01-21T03:02:57.400Z",
                      "__v": 1
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get-member-content/6784f33d87b746f84375dfdb": {
      "get": {
        "tags": ["Content Post Management > Get All Member Post"],
        "summary": "New Request",
        "description": "This request retrieves all content posts made by a specific member identified by their member ID. It returns a list of posts along with their details, including the author's handle.\n\n### Request Parameters\n\n- **memberId** (String, required): The unique identifier of the member whose posts are to be retrieved.\n    \n\n### Request Headers\n\n- **Authorization** (String, required): The access token used for authentication. This token must be included in the request headers to access the endpoint.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| 200 | Successfully retrieved the member's posts. |\n| 404 | No posts found for the specified member ID. |\n| 500 | An internal server error occurred. |",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Content-Security-Policy": {
                "schema": {
                  "type": "string",
                  "example": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
                }
              },
              "Cross-Origin-Opener-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Cross-Origin-Resource-Policy": {
                "schema": {
                  "type": "string",
                  "example": "same-origin"
                }
              },
              "Origin-Agent-Cluster": {
                "schema": {
                  "type": "string",
                  "example": "?1"
                }
              },
              "Referrer-Policy": {
                "schema": {
                  "type": "string",
                  "example": "no-referrer"
                }
              },
              "Strict-Transport-Security": {
                "schema": {
                  "type": "string",
                  "example": "max-age=31536000; includeSubDomains"
                }
              },
              "X-Content-Type-Options": {
                "schema": {
                  "type": "string",
                  "example": "nosniff"
                }
              },
              "X-DNS-Prefetch-Control": {
                "schema": {
                  "type": "string",
                  "example": "off"
                }
              },
              "X-Download-Options": {
                "schema": {
                  "type": "string",
                  "example": "noopen"
                }
              },
              "X-Frame-Options": {
                "schema": {
                  "type": "string",
                  "example": "SAMEORIGIN"
                }
              },
              "X-Permitted-Cross-Domain-Policies": {
                "schema": {
                  "type": "string",
                  "example": "none"
                }
              },
              "X-XSS-Protection": {
                "schema": {
                  "type": "integer",
                  "example": "0"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer",
                  "example": "100"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer",
                  "example": "99"
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Wed, 22 Jan 2025 01:55:59 GMT"
                }
              },
              "X-RateLimit-Reset": {
                "schema": {
                  "type": "integer",
                  "example": "1737511860"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "4458"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"116a-SvFjlaYYUUJn8j8VPfU3GHOb5V0\""
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Posts retrieved successfully!",
                    "posts": [
                      {
                        "_id": "6787d9f3c0e4b464b7f8c952",
                        "author": {
                          "_id": "6784f33d87b746f84375dfdb",
                          "handle": "memberadmin"
                        },
                        "content": "This is my test post with Images",
                        "media": [
                          "http://localhost:3000/media/images/media-1736956402939.jpg",
                          "http://localhost:3000/media/images/media-1736956402940.png",
                          "http://localhost:3000/media/images/media-1736956402957.png",
                          "http://localhost:3000/media/images/media-1736956402966.png"
                        ],
                        "likes": [
                          "678a83855a365753377ce8a0",
                          "6784f33d87b746f84375dfdb"
                        ],
                        "comments": ["6787dd79c0e4b464b7f8c957"],
                        "likeCount": -1,
                        "createdAt": "2025-01-15T15:53:23.289Z",
                        "updatedAt": "2025-01-21T23:30:19.522Z",
                        "__v": 3
                      },
                      {
                        "_id": "678f054b438801971ba45ed5",
                        "author": {
                          "_id": "6784f33d87b746f84375dfdb",
                          "handle": "memberadmin"
                        },
                        "content": "Happy to create another post",
                        "media": [],
                        "likes": [],
                        "comments": [],
                        "likeCount": 0,
                        "createdAt": "2025-01-21T02:24:11.652Z",
                        "updatedAt": "2025-01-21T02:24:11.652Z",
                        "__v": 0
                      },
                      {
                        "_id": "678f07dd5b4a8ba050b6fd65",
                        "author": {
                          "_id": "6784f33d87b746f84375dfdb",
                          "handle": "memberadmin"
                        },
                        "content": "This is my test post with Images",
                        "media": [],
                        "likes": [],
                        "comments": [],
                        "likeCount": 0,
                        "createdAt": "2025-01-21T02:35:09.230Z",
                        "updatedAt": "2025-01-21T02:35:09.230Z",
                        "__v": 0
                      },
                      {
                        "_id": "678f0996009242b2b261257c",
                        "author": {
                          "_id": "6784f33d87b746f84375dfdb",
                          "handle": "memberadmin"
                        },
                        "content": "This is my test post with Images",
                        "media": [],
                        "likes": [],
                        "comments": [],
                        "likeCount": 0,
                        "createdAt": "2025-01-21T02:42:30.407Z",
                        "updatedAt": "2025-01-21T02:42:30.407Z",
                        "__v": 0
                      },
                      {
                        "_id": "678f0df56951444567304331",
                        "author": {
                          "_id": "6784f33d87b746f84375dfdb",
                          "handle": "memberadmin"
                        },
                        "content": "This is my test post with Images",
                        "media": [
                          "http://localhost:3000/media/images/media-1737428468932.jpg",
                          "http://localhost:3000/media/images/media-1737428468932.png",
                          "http://localhost:3000/media/images/media-1737428468942.png",
                          "http://localhost:3000/media/images/media-1737428468945.png"
                        ],
                        "likes": [],
                        "comments": [],
                        "likeCount": 0,
                        "createdAt": "2025-01-21T03:01:09.319Z",
                        "updatedAt": "2025-01-21T03:01:09.319Z",
                        "__v": 0
                      },
                      {
                        "_id": "678f0df86951444567304336",
                        "author": {
                          "_id": "6784f33d87b746f84375dfdb",
                          "handle": "memberadmin"
                        },
                        "content": "Here is a test to see if my files are updated with images It has given me issues all day",
                        "media": [
                          "http://localhost:3000/media/images/media-1737428472313.jpg",
                          "http://localhost:3000/media/images/media-1737428472313.png",
                          "http://localhost:3000/media/images/media-1737428472326.png",
                          "http://localhost:3000/media/images/media-1737428472333.png",
                          "http://localhost:3000/media/images/media-1737428577040.png",
                          "http://localhost:3000/media/images/media-1737428577044.png",
                          "http://localhost:3000/media/images/media-1737428577044.jpg",
                          "http://localhost:3000/media/images/media-1737428577045.png"
                        ],
                        "likes": [],
                        "comments": [],
                        "likeCount": 0,
                        "createdAt": "2025-01-21T03:01:12.684Z",
                        "updatedAt": "2025-01-21T03:02:57.400Z",
                        "__v": 1
                      },
                      {
                        "_id": "67902c9dab86d91a280353ee",
                        "author": {
                          "_id": "6784f33d87b746f84375dfdb",
                          "handle": "memberadmin"
                        },
                        "content": "This is my test post with Images",
                        "media": [
                          "http://localhost:3000/media/images/media-1737501852856.jpg",
                          "http://localhost:3000/media/images/media-1737501852858.png",
                          "http://localhost:3000/media/images/media-1737501852897.png",
                          "http://localhost:3000/media/images/media-1737501852914.png"
                        ],
                        "likes": [],
                        "comments": [],
                        "likeCount": 0,
                        "createdAt": "2025-01-21T23:24:13.359Z",
                        "updatedAt": "2025-01-21T23:24:13.359Z",
                        "__v": 0
                      },
                      {
                        "_id": "67902cc7c0993a1684f90aac",
                        "author": {
                          "_id": "6784f33d87b746f84375dfdb",
                          "handle": "memberadmin"
                        },
                        "content": "This is my test post with Images",
                        "media": [
                          "http://localhost:3000/media/images/media-1737501894733.jpg",
                          "http://localhost:3000/media/images/media-1737501894735.png",
                          "http://localhost:3000/media/images/media-1737501894793.png",
                          "http://localhost:3000/media/images/media-1737501894811.png"
                        ],
                        "likes": [],
                        "comments": [],
                        "likeCount": 0,
                        "createdAt": "2025-01-21T23:24:55.141Z",
                        "updatedAt": "2025-01-21T23:24:55.141Z",
                        "__v": 0
                      },
                      {
                        "_id": "67902ccac0993a1684f90ab1",
                        "author": {
                          "_id": "6784f33d87b746f84375dfdb",
                          "handle": "memberadmin"
                        },
                        "content": "This is my test post with Images",
                        "media": [
                          "http://localhost:3000/media/images/media-1737501897885.jpg",
                          "http://localhost:3000/media/images/media-1737501897885.png",
                          "http://localhost:3000/media/images/media-1737501897908.png",
                          "http://localhost:3000/media/images/media-1737501897967.png"
                        ],
                        "likes": [],
                        "comments": [],
                        "likeCount": 0,
                        "createdAt": "2025-01-21T23:24:58.246Z",
                        "updatedAt": "2025-01-21T23:24:58.246Z",
                        "__v": 0
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/create-comment/": {
      "post": {
        "tags": ["Comments Management > Create Comment Endpoint"],
        "summary": "New Request",
        "description": "This request allows members to create a new comment on a content post by sending a POST request to the comment creation endpoint. The request typically includes the following components:\n\n### Request Parameters\n\n#### Body Parameters:\n\n- **`postId`** (String, required): The unique identifier of the post to which the comment is being added.\n    \n- **`input`** (String, required): The text content of the comment.\n    \n\n### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication. This should be included in the request headers as a Bearer token. The token is typically stored in cookies after the member logs in.\n    \n\n### Member ID Retrieval:\n\n- The `memberId` is obtained from the authenticated member's session, which is typically stored in the request context after the member logs in.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `200` | Successfully created the comment |\n| `400` | Bad request due to missing input or invalid comment |\n| `404` | Post or member not found |\n| `500` | An internal server error occurred |\n\n### Detailed Status Code Descriptions:\n\n- **200 OK**:\n    \n    - The comment has been successfully created.\n        \n- **400 Bad Request**:\n    \n    - The request is invalid due to missing comment input or other input issues.\n        \n- **404 Not Found**:\n    \n    - The post or member associated with the provided IDs could not be found.\n        \n- **500 Internal Server Error**:\n    \n    - An unexpected error occurred on the server while processing the request",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "postId": "6774086f60a8f918dbf19bb2",
                  "input": "beautiful pictures you got there"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "342"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"156-+XXNEYPrHVOeGkCbDTNvzlAZK9U\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Wed, 15 Jan 2025 16:08:26 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Comment created successfully!",
                    "comment": {
                      "member": "6784f33d87b746f84375dfdb",
                      "contentPost": "6787d9f3c0e4b464b7f8c952",
                      "input": "beautiful pictures you got there",
                      "likes": [],
                      "_id": "6787dd79c0e4b464b7f8c957",
                      "replies": [],
                      "createdAt": "2025-01-15T16:08:25.631Z",
                      "updatedAt": "2025-01-15T16:08:25.631Z",
                      "__v": 0
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "342"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"156-Pt53JwAfKAVtMCzxV1plSrDG4cE\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Sat, 18 Jan 2025 06:43:42 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Comment created successfully!",
                    "comment": {
                      "member": "678a83855a365753377ce8a0",
                      "contentPost": "6774086f60a8f918dbf19bb2",
                      "input": "beautiful pictures you got there",
                      "likes": [],
                      "_id": "678b4d9ef3710f37b3d5dab8",
                      "replies": [],
                      "createdAt": "2025-01-18T06:43:42.370Z",
                      "updatedAt": "2025-01-18T06:43:42.370Z",
                      "__v": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/update-comment/678f0f6cec01a6f428f89377": {
      "put": {
        "tags": ["Comments Management > Update Comment Endpoint"],
        "summary": "New Request",
        "description": "This request allows members to update a comment by sending a PUT request to the comment update endpoint. The request typically includes the following components:\n\n### Request Parameters\n\n#### Path Parameters:\n\n- **`commentId`** (String, required): The unique identifier of the comment that the member wants to update.\n    \n\n#### Body Parameters:\n\n- **`input`** (String, required): The new text content for the comment.\n    \n\n### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication. This should be included in the request headers as a Bearer token. The token is typically stored in cookies after the member logs in.\n    \n\n### Member ID Retrieval:\n\n- The `memberId` is obtained from the authenticated member's session, which is typically stored in the request context after the member logs in.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `200` | Successfully updated the comment |\n| `400` | Bad request due to empty input |\n| `403` | Unauthorized access to update the comment |\n| `404` | Comment not found |\n| `500` | An internal server error occurred |",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "input": "Here is my updated Post"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "331"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"14b-C0XuNLxQJI47T7eowHzvL6rFsWA\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Wed, 15 Jan 2025 16:30:57 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "example-0": {
                    "summary": "New Request",
                    "value": {
                      "success": true,
                      "data": {
                        "message": "Comment updated successfully!",
                        "comment": {
                          "_id": "6787dd79c0e4b464b7f8c957",
                          "member": "6784f33d87b746f84375dfdb",
                          "contentPost": "6787d9f3c0e4b464b7f8c952",
                          "input": "I love these pictures",
                          "likes": [],
                          "replies": [],
                          "createdAt": "2025-01-15T16:08:25.631Z",
                          "updatedAt": "2025-01-15T16:29:26.209Z",
                          "__v": 0
                        }
                      }
                    }
                  },
                  "example-1": {
                    "summary": "success",
                    "value": {
                      "success": true,
                      "data": {
                        "message": "Comment updated successfully!",
                        "comment": {
                          "_id": "678b4d9ef3710f37b3d5dab8",
                          "member": "678a83855a365753377ce8a0",
                          "contentPost": "6774086f60a8f918dbf19bb2",
                          "input": "Here is my updated Post",
                          "likes": [],
                          "replies": [],
                          "createdAt": "2025-01-18T06:43:42.370Z",
                          "updatedAt": "2025-01-18T06:55:20.230Z",
                          "__v": 0
                        }
                      }
                    }
                  },
                  "example-2": {
                    "summary": "New Request",
                    "value": {
                      "success": true,
                      "data": {
                        "message": "Comment updated successfully!",
                        "comment": {
                          "_id": "678b4d9ef3710f37b3d5dab8",
                          "member": "678a83855a365753377ce8a0",
                          "contentPost": "6774086f60a8f918dbf19bb2",
                          "input": "Here is my updated Post",
                          "likes": [],
                          "replies": [],
                          "createdAt": "2025-01-18T06:43:42.370Z",
                          "updatedAt": "2025-01-18T06:55:20.230Z",
                          "__v": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/like-comment/6787dd79c0e4b464b7f8c957": {
      "put": {
        "tags": ["Comments Management > Like Comment Endpoint"],
        "summary": "New Request",
        "description": "This request allows members to like a comment by sending a PUT request to the like comment endpoint. The request typically includes the following components:\n\n### Request Parameters\n\n#### Path Parameters:\n\n- **`commentId`** (String, required): The unique identifier of the comment that the member wants to like.\n    \n\n#### Body Parameters:\n\n- **`memberId`** (String, required): The unique identifier of the member liking the comment. This is typically obtained from the authenticated member's session.\n    \n\n### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication. This should be included in the request headers as a Bearer token. The token is typically stored in cookies after the member logs in.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `200` | Successfully unliked the comment |\n| `400` | Bad request due to duplicate likes |\n| `404` | Comment not found |\n| `500` | An internal server error occurred |",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": ""
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "163"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"a3-/6C6lG0WFHDE0LKQdcL2Xm6t+/8\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Wed, 15 Jan 2025 17:11:09 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "example-0": {
                    "summary": "New Request",
                    "value": {
                      "success": true,
                      "data": {
                        "message": "Reply created successfully!",
                        "reply": {
                          "member": "677e57cf66d4dc24154eb41a",
                          "input": "This is a reply to the comment",
                          "likes": []
                        }
                      }
                    }
                  },
                  "example-1": {
                    "summary": "New Request",
                    "value": {
                      "success": true,
                      "data": {
                        "message": "Comment liked successfully!",
                        "comment": {
                          "_id": "6787dd79c0e4b464b7f8c957",
                          "member": "6784f33d87b746f84375dfdb",
                          "contentPost": "6787d9f3c0e4b464b7f8c952",
                          "input": "I love these pictures",
                          "likes": ["678a83855a365753377ce8a0"],
                          "replies": [
                            {
                              "member": "677e57cf66d4dc24154eb41a",
                              "input": "This is a reply to the comment",
                              "likes": [null],
                              "_id": "6787ec2cc0e4b464b7f8c960",
                              "created_at": "2025-01-15T17:11:08.914Z"
                            }
                          ],
                          "createdAt": "2025-01-15T16:08:25.631Z",
                          "updatedAt": "2025-01-19T00:06:23.270Z",
                          "__v": 9
                        }
                      }
                    }
                  },
                  "example-2": {
                    "summary": "New Request",
                    "value": {
                      "success": true,
                      "data": {
                        "message": "Comment liked successfully!",
                        "comment": {
                          "_id": "6787dd79c0e4b464b7f8c957",
                          "member": "6784f33d87b746f84375dfdb",
                          "contentPost": "6787d9f3c0e4b464b7f8c952",
                          "input": "I love these pictures",
                          "likes": ["678a83855a365753377ce8a0"],
                          "replies": [
                            {
                              "member": "677e57cf66d4dc24154eb41a",
                              "input": "This is a reply to the comment",
                              "likes": [null],
                              "_id": "6787ec2cc0e4b464b7f8c960",
                              "created_at": "2025-01-15T17:11:08.914Z"
                            }
                          ],
                          "createdAt": "2025-01-15T16:08:25.631Z",
                          "updatedAt": "2025-01-19T00:06:23.270Z",
                          "__v": 9
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/unlike-comment/6787dd79c0e4b464b7f8c957": {
      "put": {
        "tags": ["Comments Management > Dislike Comment Endpoint"],
        "summary": "New Request",
        "description": "This request allows members to dislike a comment by sending a PUT request to the dislike comment endpoint. The request typically includes the following components:\n\n### Request Parameters\n\n#### Path Parameters:\n\n- **`commentId`** (String, required): The unique identifier of the comment that the member wants to dislike.\n    \n\n### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication. This should be included in the request headers as a Bearer token. The token is typically stored in cookies after the member logs in.\n    \n\n### Member ID Retrieval:\n\n- The `memberId` is obtained from the authenticated member's session, which is typically stored in the request context after the member logs in.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `200` | Successfully disliked the comment |\n| `400` | Bad request due to not having liked the comment |\n| `404` | Comment not found |\n| `500` | An internal server error occurred |\n\n### Detailed Status Code Descriptions:\n\n- **200 OK**:\n    \n    - The comment has been successfully disliked.\n        \n- **400 Bad Request**:\n    \n    - The request is invalid because the member has not liked the comment yet.\n        \n- **404 Not Found**:\n    \n    - The comment associated with the provided comment ID could not be found.\n        \n- **500 Internal Server Error**:\n    \n    - An unexpected error occurred on the server while processing the request.",
        "requestBody": {
          "content": {}
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/comment-reply/": {
      "post": {
        "tags": ["Comments Management > Reply Comment Endpoint"],
        "summary": "New Request",
        "description": "This request allows members to create a new reply to a comment by sending a POST request to the comment reply creation endpoint. The request typically includes the following components:\n\n### Request Parameters\n\n#### Body Parameters:\n\n- **`commentId`** (String, required): The unique identifier of the comment to which the reply is being added.\n    \n- **`input`** (String, required): The text content of the reply.\n    \n\n### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication. This should be included in the request headers as a Bearer token. The token is typically stored in cookies after the member logs in.\n    \n\n### Member ID Retrieval:\n\n- The `memberId` is obtained from the authenticated member's session, which is typically stored in the request context after the member logs in.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `201` | Successfully created the reply |\n| `400` | Bad request due to missing input or invalid reply |\n| `404` | Comment or member not found |\n| `500` | An internal server error occurred |",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "commentId": "6787dd79c0e4b464b7f8c957",
                  "input": "This is a demo reply to the comment"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "168"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"a8-cTMdLi/3b3YNkR4TL8+d6D3omtw\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Sun, 19 Jan 2025 09:00:16 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Reply created successfully!",
                    "reply": {
                      "member": "678a83855a365753377ce8a0",
                      "input": "This is a demo reply to the comment",
                      "likes": []
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/like-comment-reply/678f11cde336c5b0de86e449": {
      "put": {
        "tags": ["Comments Management > like Comment Reply"],
        "summary": "New Request",
        "description": "This endpoint allows a member to like a specific reply to a comment. It requires the reply's ID as a URL parameter and uses the member's ID from the authentication token.\n\n### Request Parameters\n\n#### URL Parameters:\n\n- **`replyId`** (String, required): The unique identifier of the reply to be liked.\n    \n\n#### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication, which contains the member's ID.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `200` | Reply liked successfully |\n| `400` | You have already liked this reply |\n| `404` | Reply not found |\n| `500` | An internal server error occurred |\n\n### Detailed Status Code Descriptions:\n\n- **200 OK**:\n    \n    - The reply was successfully liked, and the response includes the updated reply data.\n        \n- **400 Bad Request**:\n    \n    - The member has already liked the reply, so they cannot like it again.\n        \n- **404 Not Found**:\n    \n    - The specified reply ID or associated comment does not exist in the database.\n        \n- **500 Internal Server Error**:\n    \n    - An unexpected error occurred while processing the request.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": ""
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "238"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"ee-dEjtHO9HKLoWDyP2nTqcMrXdvRg\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Sun, 19 Jan 2025 09:21:53 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Reply liked successfully!",
                    "reply": {
                      "member": "677e57cf66d4dc24154eb41a",
                      "input": "This is a reply to the comment",
                      "likes": [null],
                      "_id": "6787ec2cc0e4b464b7f8c960",
                      "created_at": "2025-01-15T17:11:08.914Z"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/dislike-comment-reply/678f11cde336c5b0de86e449": {
      "put": {
        "tags": ["Comments Management > Dislike Comment Reply"],
        "summary": "New Request",
        "description": "This request removes a like from a specific reply to a comment within the API. It checks if the member has previously liked the reply and updates the reply's like count accordingly.\n\n### Request Parameters:\n\n- **`replyId`** (String, required): The ID of the reply to dislike.\n    \n\n### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `200` | Successfully disliked the comment reply |\n| `400` | Bad request due to not having liked the reply |\n| `404` | Reply or comment not found |\n| `500` | An internal server error occurred |\n\n### Detailed Status Code Descriptions:\n\n- **200 OK**:\n    \n    - The comment reply was successfully disliked, and the response includes the updated reply data.\n        \n- **400 Bad Request**:\n    \n    - The member has not liked the reply yet, so they cannot dislike it.\n        \n- **404 Not Found**:\n    \n    - The specified reply ID or associated comment does not exist in the database.\n        \n- **500 Internal Server Error**:\n    \n    - An unexpected error occurred while processing the request.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": ""
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "237"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"ed-rtJpL1V5ku1mIrNefNqGX5o+BAo\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Sun, 19 Jan 2025 10:23:49 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Reply disliked successfully!",
                    "reply": {
                      "member": "677e57cf66d4dc24154eb41a",
                      "input": "This is a reply to the comment",
                      "likes": [],
                      "_id": "6787ec2cc0e4b464b7f8c960",
                      "created_at": "2025-01-15T17:11:08.914Z"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/delete-comment/67768f37c651c71965c770a5": {
      "delete": {
        "tags": ["Comments Management > Delete Comment"],
        "summary": "New Request",
        "description": "This request allows members to delete a comment by sending a DELETE request to the comment deletion endpoint. The request typically includes the following components:\n\n### Request Parameters\n\n#### Path Parameters:\n\n- **`commentId`** (String, required): The unique identifier of the comment that the member wants to delete.\n    \n\n### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication. This should be included in the request headers as a Bearer token. The token is typically stored in cookies after the member logs in.\n    \n\n### Member ID and Role Retrieval:\n\n- The `memberId` and `memberRole` are obtained from the authenticated member's session, which is typically stored in the request context after the member logs in.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `200` | Successfully deleted the comment |\n| `403` | Unauthorized access to delete the comment |\n| `404` | Comment not found |\n| `500` | An internal server error occurred |\n\n### Detailed Status Code Descriptions:\n\n- **200 OK**:\n    \n    - The comment has been successfully deleted.\n        \n- **403 Forbidden**:\n    \n    - The member is not authorized to delete the comment because they are neither the author nor an admin.\n        \n- **404 Not Found**:\n    \n    - The comment associated with the provided comment ID could not be found.\n        \n- **500 Internal Server Error**:\n    \n    - An unexpected error occurred on the server while processing the request.",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "105"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"69-7EEObM/iJBh/tojTnwuMDeIe7X0\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Thu, 16 Jan 2025 10:24:17 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "example-0": {
                    "summary": "New Request",
                    "value": {
                      "success": true,
                      "data": {
                        "message": "Comment deleted successfully!",
                        "memberId": "677270dde8771a8cd1fd337b"
                      }
                    }
                  },
                  "example-1": {
                    "summary": "success",
                    "value": {
                      "success": true,
                      "data": {
                        "message": "Comment deleted successfully!",
                        "memberId": "677270dde8771a8cd1fd337b"
                      }
                    }
                  },
                  "example-2": {
                    "summary": "success Response",
                    "value": {
                      "success": true,
                      "data": {
                        "message": "Comment deleted successfully!",
                        "memberId": "677270dde8771a8cd1fd337b"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/create-chat/": {
      "post": {
        "tags": ["Chat Management > Chat Creation Endpoint"],
        "summary": "New Request",
        "description": "This request allows the creation of a new chat with one or more participants.\n\n### Request Body Parameters:\n\n- **`participantsId`** (Array of Strings, required): An array of participant IDs to include in the chat.\n    \n\n### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication. This should be included in the request headers as a Bearer token.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `201` | Successfully created the chat |\n| `400` | Bad request due to missing participants |\n| `401` | Authentication required |\n| `404` | Participant not found |\n| `500` | An internal server error occurred |",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "participantsId": [
                    "6784f33d87b746f84375dfdb",
                    "677e58f666d4dc24154eb41e"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "340"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"154-ggpUWg6Ajyg3jDFy+vGfkwW210Y\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Sun, 19 Jan 2025 12:11:35 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Chat created successfully!",
                    "chat": {
                      "participants": [
                        "6784f33d87b746f84375dfdb",
                        "677e58f666d4dc24154eb41e",
                        "678a83855a365753377ce8a0"
                      ],
                      "creator": "678a83855a365753377ce8a0",
                      "message": [],
                      "_id": "678cebf503f8856ce5a0a340",
                      "createdAt": "2025-01-19T12:11:33.583Z",
                      "updatedAt": "2025-01-19T12:11:33.583Z",
                      "__v": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/create-chat-entrY/678d0cf234e5131cc787ff39": {
      "post": {
        "tags": ["Chat Management > Chat Entry Creation Endpoint"],
        "summary": "New Request",
        "description": "This endpoint allows members to send a message in a specific chat.\n\n### Request Parameters:\n\n- **`chatId`** (String, required): The unique identifier of the chat.\n    \n\n### Request Body Parameters:\n\n- **`content`** (String, required): The content of the message.\n    \n- **`replyTo`** (String, optional): The ID of the message being replied to.\n    \n\n### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication which is stored in cookies.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `201` | Successfully created the chat entry |\n| `403` | You are not a member of this chat |\n| `404` | Chat does not exist |\n| `500` | An internal server error occurred |",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "content": "Very important bro",
                  "replyTo": "678a83855a365753377ce8a0"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "361"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"169-uYKZ0thnBSOD7e+Srg0RiT/9eE4\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Sun, 19 Jan 2025 14:33:09 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "example-0": {
                    "summary": "success",
                    "value": {
                      "success": true,
                      "data": {
                        "message": "Chat entry (message) created successfully!",
                        "chatEntry": {
                          "chat": "678d0cf234e5131cc787ff39",
                          "sender": "678a83855a365753377ce8a0",
                          "content": "Hey guys I just created a group for us for studies",
                          "replyTo": null,
                          "_id": "678d0d2434e5131cc787ff43",
                          "createdAt": "2025-01-19T14:33:08.997Z",
                          "updatedAt": "2025-01-19T14:33:08.997Z",
                          "__v": 0
                        }
                      }
                    }
                  },
                  "example-1": {
                    "summary": "replySuccess",
                    "value": {
                      "success": true,
                      "data": {
                        "message": "Chat entry (message) created successfully!",
                        "chatEntry": {
                          "chat": "678d0cf234e5131cc787ff39",
                          "sender": "677e58f666d4dc24154eb41e",
                          "content": "Very important bro",
                          "replyTo": "678a83855a365753377ce8a0",
                          "_id": "678d0ef234e5131cc787ff55",
                          "createdAt": "2025-01-19T14:40:50.748Z",
                          "updatedAt": "2025-01-19T14:40:50.748Z",
                          "__v": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get-chat/678d0cf234e5131cc787ff39": {
      "get": {
        "tags": ["Chat Management > Chat Retrieval Endpoint"],
        "summary": "New Request",
        "description": "This endpoint retrieves a specific chat and its messages.\n\n### Request Parameters:\n\n- **`chatId`** (String, required): The unique identifier of the chat.\n    \n\n### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `200` | Chat retrieved successfully |\n| `404` | Chat cannot be found |\n| `500` | An internal server error occurred |",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "1563"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"61b-njDVBzv6d0ufG9KGEG+yYxWXSp4\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Sun, 19 Jan 2025 14:42:16 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Chat retrieved successfully!",
                    "chat": {
                      "_id": "678d0cf234e5131cc787ff39",
                      "participants": [
                        {
                          "_id": "6784f33d87b746f84375dfdb",
                          "handle": "memberadmin"
                        },
                        {
                          "_id": "677e58f666d4dc24154eb41e",
                          "handle": "firstuser1"
                        },
                        {
                          "_id": "678a83855a365753377ce8a0",
                          "handle": "borodidier"
                        }
                      ],
                      "creator": "678a83855a365753377ce8a0",
                      "messages": [
                        {
                          "_id": "678d0d2434e5131cc787ff43",
                          "chat": "678d0cf234e5131cc787ff39",
                          "sender": {
                            "_id": "678a83855a365753377ce8a0",
                            "handle": "borodidier"
                          },
                          "content": "Hey guys I just created a group for us for studies",
                          "replyTo": null,
                          "createdAt": "2025-01-19T14:33:08.997Z",
                          "updatedAt": "2025-01-19T14:33:08.997Z",
                          "__v": 0
                        },
                        {
                          "_id": "678d0e6734e5131cc787ff4b",
                          "chat": "678d0cf234e5131cc787ff39",
                          "sender": {
                            "_id": "677e58f666d4dc24154eb41e",
                            "handle": "firstuser1"
                          },
                          "content": "Got it, great job men!",
                          "replyTo": null,
                          "createdAt": "2025-01-19T14:38:31.778Z",
                          "updatedAt": "2025-01-19T14:38:31.778Z",
                          "__v": 0
                        },
                        {
                          "_id": "678d0e8634e5131cc787ff50",
                          "chat": "678d0cf234e5131cc787ff39",
                          "sender": {
                            "_id": "677e58f666d4dc24154eb41e",
                            "handle": "firstuser1"
                          },
                          "content": "Got it, great job man!",
                          "replyTo": null,
                          "createdAt": "2025-01-19T14:39:02.356Z",
                          "updatedAt": "2025-01-19T14:39:02.356Z",
                          "__v": 0
                        },
                        {
                          "_id": "678d0ef234e5131cc787ff55",
                          "chat": "678d0cf234e5131cc787ff39",
                          "sender": {
                            "_id": "677e58f666d4dc24154eb41e",
                            "handle": "firstuser1"
                          },
                          "content": "Very important bro",
                          "replyTo": "678a83855a365753377ce8a0",
                          "createdAt": "2025-01-19T14:40:50.748Z",
                          "updatedAt": "2025-01-19T14:40:50.748Z",
                          "__v": 0
                        }
                      ],
                      "createdAt": "2025-01-19T14:32:18.168Z",
                      "updatedAt": "2025-01-19T14:40:51.091Z",
                      "__v": 4
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/delete-chat/678d02bac8484f44d2477a65": {
      "delete": {
        "tags": ["Chat Management > Chat Deletion Endpoint"],
        "summary": "New Request",
        "description": "This request allows members to delete a specific chat.\n\n### Request Parameters:\n\n- **`chatId`** (String, required): The unique identifier of the chat.\n    \n\n### Request Headers:\n\n- **Authorization** (String, required): The access token used for authentication.\n    \n\n### Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| `200` | Chat deleted successfully |\n| `400` | Chat ID is required |\n| `403` | You are not authorized to delete this chat |\n| `404` | Chat not found or already deleted |\n| `500` | An internal server error occurred |",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Powered-By": {
                "schema": {
                  "type": "string",
                  "example": "Express"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json; charset=utf-8"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "64"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string",
                  "example": "W/\"40-tHSfDUspqU7PDATKOMSYABcL3QM\""
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Sun, 19 Jan 2025 14:44:23 GMT"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Keep-Alive": {
                "schema": {
                  "type": "string",
                  "example": "timeout=5"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Chat deleted successfully."
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

